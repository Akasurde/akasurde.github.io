<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>https://akasurde.github.io</title><link href="https://akasurde.github.io/" rel="alternate"></link><link href="https://akasurde.github.io/feeds/all.atom.xml" rel="self"></link><id>https://akasurde.github.io/</id><updated>2020-05-13T12:03:00+05:30</updated><subtitle>Developer, Hacker</subtitle><entry><title>Installing Pyyaml with libyaml support on MacOS</title><link href="https://akasurde.github.io/installing-pyyaml-with-libyaml-on-macos.html" rel="alternate"></link><published>2020-05-13T12:03:00+05:30</published><updated>2020-05-13T12:03:00+05:30</updated><author><name>Abhijeet Kasurde</name></author><id>tag:akasurde.github.io,2020-05-13:/installing-pyyaml-with-libyaml-on-macos.html</id><summary type="html">&lt;p&gt;Installing Pyyaml with libyaml support on MacOS&lt;/p&gt;</summary><content type="html">&lt;p&gt;I faced issue while installing Pyyaml with libyaml support on Mac OS Mojave. But I was able to successfully install at the end. Here, are some instructions&lt;/p&gt;
&lt;pre&gt;
# wget https://github.com/yaml/pyyaml/archive/5.3.1.zip
# unzip pyyaml-5.3.1.zip
# cd pyyaml-5.3.1
&lt;/pre&gt;

&lt;p&gt;If you run &lt;code&gt;make&lt;/code&gt; without &lt;code&gt;cython&lt;/code&gt; package you will get the following error -&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;clang&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;no&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;such&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;or&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;directory&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ext/_yaml.c&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In order to rectify this error -&lt;/p&gt;
&lt;pre&gt;
# pip install cython
&lt;/pre&gt;

&lt;p&gt;You will need libyaml header files as well, you can install this -&lt;/p&gt;
&lt;pre&gt;
# brew install libyaml
&lt;/pre&gt;

&lt;p&gt;Finally, include &lt;code&gt;LDFLAGS&lt;/code&gt; and &lt;code&gt;CFLAGS&lt;/code&gt; to use custom location for make command like -&lt;/p&gt;
&lt;pre&gt;
# LDFLAGS="-L/usr/local/lib/" CFLAGS="-I/usr/local/Cellar/libyaml/0.2.2/include" make installext
&lt;/pre&gt;

&lt;p&gt;You will be greeted with success message like -&lt;/p&gt;
&lt;pre&gt;
running install_egg_info
Writing /Volumes/data/venv3.8/lib/python3.8/site-packages/PyYAML-5.3.1-py3.8.egg-info
&lt;/pre&gt;

&lt;p&gt;Let me know if you need any help.&lt;/p&gt;</content><category term="yaml, libyaml, macos"></category><category term="macos"></category><category term="ansible"></category><category term="yaml"></category><category term="command-line"></category></entry><entry><title>Canceling BigBasket BBStar membership the hard way</title><link href="https://akasurde.github.io/bigbasket-bbstar-membership-revoked.html" rel="alternate"></link><published>2020-04-10T12:03:00+05:30</published><updated>2020-04-10T12:03:00+05:30</updated><author><name>Abhijeet Kasurde</name></author><id>tag:akasurde.github.io,2020-04-10:/bigbasket-bbstar-membership-revoked.html</id><summary type="html">&lt;p&gt;In this post, I shared my experience about BigBasket membership cancellation process&lt;/p&gt;</summary><content type="html">&lt;p&gt;On 8th April, 2020, I got a notification that my &lt;a href="https://www.bigbasket.com"&gt;BigBasket&lt;/a&gt; BBStar membership got renewed and I was charged for Rs. 299/- for the next six months of membership. I decided not to continue my membership.&lt;/p&gt;
&lt;p&gt;I visited BigBasket website and started looking for the option to cancel membership. But to my surprise, I could not find such option. After searching and reading through Quora questions and FAQs section, I realised that I need to install BigBasket Mobile app on my mobile phone and cancel from there. Then I installed BigBasket Android App from Google Play Store and logged in using my credentials.&lt;/p&gt;
&lt;p&gt;I tinkered with the App and realised that there is no such option available in the BigBasket app as well. I surprised to see this. I tried to contact BigBasket support team but due to All India lockdown due to COVID-19 situation, I failed miserably.&lt;/p&gt;
&lt;p&gt;So, I started looking into the website code which via &lt;a href="https://developer.mozilla.org/en-US/docs/Tools"&gt;Firefox Developer Tools&lt;/a&gt; and soon learned that the BigBasket.com is written in AngularJS.&lt;/p&gt;
&lt;p&gt;I searched a lot for a button which would trigger the "Cancel the membership" workflow, but could not find such options. I am not sure if this business decision or bad UI/UX decision.
I continued my journey of reading the code and found main app called &lt;a href="https://www.bigbasket.com/static/v2263/desktop-web/bbstar/app.min.js"&gt;"app.min.js"&lt;/a&gt;. I soon learned that this JS contained all the required code I needed. I added a XHR Breakpoint in Firefox developer tools to stop the ongoing XHR requests for BBStar membership summary info and can debug a bit for more info. I again logged into the app, visited BBStar section and voila !!! I was stopped by breakpoint. This may sound naive but for system developer like me who knew nothing about AngularJS was a moment of truth.&lt;/p&gt;
&lt;p&gt;I found a method called "unsubscribeFromBbStar" in the code on line 408, which I was sure, will trigger the "Cancellation" workflow. I went to console section, typed "$scope.unsubscribeFromBbStar()" and hit continue in breakpoint panel. I was greeted with message that you are about to unsubscribe the membership. I clicked "continue" and DONE. I checked my BB wallet and I saw my payment for the membership was refunded in my BB walled account.&lt;/p&gt;
&lt;p&gt;&lt;img alt="BBWallet Screenshot" src="https://akasurde.github.io/images/bb/bb_wallet.png"&gt;&lt;/p&gt;
&lt;p&gt;I learned a lot while doing this programming exercise. BigBasket can take a note that this functionality is not available in their web and mobile application. Thanks for reading this. Cheers.&lt;/p&gt;</content><category term="AngularJS"></category><category term="webapps"></category><category term="ui"></category><category term="ux"></category><category term="angularjs"></category></entry><entry><title>Trip report for FOSDEM and cfgmgmtcamp 2020</title><link href="https://akasurde.github.io/fosdem-cfgmgmt.html" rel="alternate"></link><published>2020-02-19T12:03:00+05:30</published><updated>2016-02-19T12:03:00+05:30</updated><author><name>Abhijeet Kasurde</name></author><id>tag:akasurde.github.io,2020-02-19:/fosdem-cfgmgmt.html</id><summary type="html">&lt;p&gt;A Trip report for FOSDEM and cfgmgmtcamp 2020&lt;/p&gt;</summary><content type="html">&lt;p&gt;I recently attended &lt;a href="https://fosdem.org/2020"&gt;FOSDEM 2020&lt;/a&gt; in Brussels, Belgium and &lt;a href="https://cfgmgmtcamp.eu/ghent2020/"&gt;Cfgmgmtcamp 2020&lt;/a&gt; in Ghent, Belgium. The following is a trip report for the same.&lt;/p&gt;
&lt;p&gt;This all started with a long weekend of conference and beer club hoping. I arrived in Brussels a night before the conference and went to the huge beer party organized in &lt;a href="https://www.deliriumvillage.com/bar/delirium-cafe/"&gt;Delirium Cafe&lt;/a&gt; by FOSDEM organizers.&lt;/p&gt;
&lt;p&gt;It was fun and surprising to attend a beer party organized by an event organizer. The room was full of geeks passionate about open source and community enjoying more than 2000 different beers under one roof.&lt;/p&gt;
&lt;p&gt;&lt;img alt="FOSDEM 2020 - Welcome" src="https://akasurde.github.io/images/fosdem/fosdem_1.jpg"&gt;&lt;/p&gt;
&lt;p&gt;The next morning the conference kicked at &lt;a href="https://www.ulb.be/en"&gt;ULB&lt;/a&gt; with a keynote speaker &lt;a href="https://fosdem.org/2020/schedule/speaker/thorsten_leemhuis/"&gt;"Thorsten Leemhuis"&lt;/a&gt;. He talked about &lt;a href="https://fosdem.org/2020/schedule/event/linux_kernel/"&gt;"The Linux Kernel: We have to finish this thing one day ;)Solving big problems in small steps for more than two decades"&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="ULB" src="https://akasurde.github.io/images/fosdem/ulb_1.jpg"&gt;&lt;/p&gt;
&lt;p&gt;After the welcome and first keynote session, I attended &lt;a href="https://fosdem.org/2020/schedule/event/openapi/"&gt;"Using OpenAPI to Maximise Your Pulp 3 Experience"&lt;/a&gt; where &lt;a href="https://fosdem.org/2020/schedule/speaker/dennis_kliban/"&gt;"Dennis Kliban"&lt;/a&gt; talked about latest Pulp OpenAPI interface and how user can use it.&lt;/p&gt;
&lt;p&gt;Next talk was interesting and was related to Ansible - &lt;a href="https://fosdem.org/2020/schedule/event/doomed/"&gt;Doomed are the dinosaurs!&lt;/a&gt; by &lt;a href="https://fosdem.org/2020/schedule/speaker/david_heijkamp/"&gt;David Heijkamp&lt;/a&gt;, where he talked about diversity about the utilization of the various open source projects and Ansible. Happy to see when speaker mentioned &lt;a href="https://twitter.com/Pyro46/status/1223557781078319104?s=20"&gt;"Ansible in the center"&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Next, my friend &lt;a href="https://fosdem.org/2020/schedule/speaker/amit_upadhye/"&gt;Amit Upadhye&lt;/a&gt; presented &lt;a href="https://fosdem.org/2020/schedule/event/openscap/"&gt;"Compliance management with OpenSCAP and Ansible"&lt;/a&gt;.He showed how organization can use OpenSCAP and Ansible to automate their compliance management tasks with ease.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://fosdem.org/2020/schedule/speaker/ganesh_nalawade/"&gt;Ganesh&lt;/a&gt; and &lt;a href="https://fosdem.org/2020/schedule/speaker/abhijeet_kasurde/"&gt;I&lt;/a&gt; were next in the line to present in the "Infra managment devroom". We presented the future of Ansible content packaging and distribution i.e. "Collection". You can find the link of our talk and collection demo &lt;a href="https://fosdem.org/2020/schedule/event/ansible_collections/"&gt;here&lt;/a&gt;. People were excited and interested to know more about the Ansible collections.&lt;/p&gt;
&lt;p&gt;After this I took a lunch break, then attended ["Foreman meets Ansible"] by &lt;a href="https://fosdem.org/2020/schedule/speaker/adam_ruzicka/"&gt;"Adam Růžička"&lt;/a&gt;. He spoke about Foreman allows user to plug Ansible in its architecture. The next session was &lt;a href="https://fosdem.org/2020/schedule/event/terraform/"&gt;"Hacking Terraform for fun and profit"&lt;/a&gt; by &lt;a href="https://fosdem.org/2020/schedule/speaker/anton_babenko/"&gt;Anton Babenko&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I saw a lot of speaker talking about "YAML" in their talks. Some of them were pro-YAML and some of them were not liking YAML at all. It was interesting to see the reasoning for introduction of new DSL in configuration management tools.&lt;/p&gt;
&lt;p&gt;Next session was related to configuration management software called &lt;a href="https://www.pulumi.com/"&gt;"Pulumi"&lt;/a&gt;, which treats infrastructure as a code. I never heard about this software before and was interesting know about. &lt;a href="Paul Stack"&gt;Paul Stack&lt;/a&gt; talked about &lt;a href="https://fosdem.org/2020/schedule/event/infratesting/"&gt;"Infrastructure testing, it's a real thing!"&lt;/a&gt; using Pulumi.&lt;/p&gt;
&lt;p&gt;Then I attended &lt;a href="https://fosdem.org/2020/schedule/event/mgmt/"&gt;Mgmt Config: Autonomous Datacentres&lt;/a&gt; by &lt;a href="https://fosdem.org/2020/schedule/speaker/james_shubin/"&gt;James Shubin&lt;/a&gt; who started his talk literally using Hip-Hop song which was initiated by command line terminal. The whole conf room was turned into a club for next 5 minutes. James talked about MgmtConfig by providing various examples which showed how MgmtConfig can be used in real time and autonomous way to do the automation. It was fun to attend lightweight and but still engaging talk to end the day.&lt;/p&gt;
&lt;p&gt;After this session, I headed towards a hallway where all community booths were located. There I met several people and had a brief intro session with them. We talked about Ansible, YAML, the future of VMware automation in Ansible etc.,
I had a chances to meet couple of folks from Ansible IRC channel and GitHub community. I really love the appreciation from the community members.&lt;/p&gt;
&lt;p&gt;I spent most of Saturday in Infra room as I was keen to know more about infra related stuff.
But I had different agenda for Sunday. I wanted to attend various talks related to RUST and Golang but end up spending most of the time in Go Language devroom. This was managed by Google folks.&lt;/p&gt;
&lt;p&gt;Sunday morning, started with me attending &lt;a href="https://fosdem.org/2020/schedule/speaker/vitaly_kuznetsov/"&gt;Vitaly Kuznetsov&lt;/a&gt; talk about &lt;a href="https://fosdem.org/2020/schedule/event/vai_pubic_clouds_and_vulnerable_cpus/"&gt;"Public clouds and vulnerable CPUs: are we secure?"&lt;/a&gt;. He talked about various CPU vulnerabilities and how they affect Public cloud offering and how user can mitigate them. It was interesting to know a lot of vulnerabilities are out there in the wild and their detection and mitigation.&lt;/p&gt;
&lt;p&gt;Next session in Virtualization and IaaS devroom, was &lt;a href="https://fosdem.org/2020/schedule/event/vai_virtio_fs/"&gt;virtio-fs&lt;/a&gt; by &lt;a href="https://fosdem.org/2020/schedule/speaker/stefan_hajnoczi/"&gt;Stefan Hajnoczi&lt;/a&gt;. He talked about shared file system for the virtual machines and its implementation. After that I attended &lt;a href="https://fosdem.org/2020/schedule/event/vai_io_uring_in_qemu/"&gt;io_uring in QEMU: high-performance disk I/O for Linux&lt;/a&gt; by &lt;a href="https://fosdem.org/2020/schedule/speaker/julia_suvorova/"&gt;Julia Suvorova&lt;/a&gt;. Author talked about new feature of Linux Kernel called "io_uring" and its implementation in QEMU.&lt;/p&gt;
&lt;p&gt;After this I headed towards "Go devroom" since the talk line up there was awesome. I attend three talks back-to-back &lt;a href="https://fosdem.org/2020/schedule/event/advanceddebugginggo/"&gt;Advanced debugging techniques of Go code&lt;/a&gt; by &lt;a href="https://fosdem.org/2020/schedule/speaker/andrii_soldatenko/"&gt;Andrii Soldatenko&lt;/a&gt;, &lt;a href="https://fosdem.org/2020/schedule/event/debugcodegenerationgo/"&gt;Debug code generation in Go&lt;/a&gt; by &lt;a href="https://fosdem.org/2020/schedule/speaker/jaana_dogan/"&gt;Jaana Dogan&lt;/a&gt; and &lt;a href="https://fosdem.org/2020/schedule/event/golinux/"&gt;Uplift your Linux systems programming skills with systemd and D-Bus&lt;/a&gt; by &lt;a href="https://fosdem.org/2020/schedule/speaker/leonid_vasilyev/"&gt;Leonid Vasilyev&lt;/a&gt;. All of these talks were very informative and lived up to my expectations.&lt;/p&gt;
&lt;p&gt;Thanks for FOSDEM organizers we can watch every talk since everything is recorded and can be found &lt;a href="https://fosdem.org/2020/schedule/events/"&gt;here&lt;/a&gt;. I will go through all sessions which I missed while I attending some other talks.&lt;/p&gt;
&lt;p&gt;I would like to thank &lt;a href="https://twitter.com/cybette"&gt;Carol Chen&lt;/a&gt; and &lt;a href="https://twitter.com/the_gundalow"&gt;gundalow&lt;/a&gt; who helped us to get the opportunity to talk in such a big Open Source event.&lt;/p&gt;
&lt;p&gt;This ends the part one of conference hoping. Next conference in the line was &lt;a href="https://cfgmgmtcamp.eu/ghent2020/"&gt;cfgmgmtcamp 2020&lt;/a&gt; which was organized in &lt;a href="https://en.wikipedia.org/wiki/Ghent"&gt;Ghent, Belgium&lt;/a&gt;. This city is scenic and beautiful, still maintaining its heritage with cathedrals and historical monuments. I would definitely recommend people to visit this beautiful city at least once in their lifetime.&lt;/p&gt;
&lt;p&gt;Conference was organized in the &lt;a href="https://en.wikipedia.org/wiki/Hogeschool_Gent"&gt;Hogeschool Gent&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="hogent" src="https://akasurde.github.io/images/fosdem/ho_gent.jpg"&gt;&lt;/p&gt;
&lt;p&gt;We started Ansible community booth in the common area of the conference. I attended keynote &lt;a href="https://cfp.cfgmgmtcamp.be/2020/talk/VQRGFB/"&gt;Untitled Config Game&lt;/a&gt; by &lt;a href="https://cfp.cfgmgmtcamp.be/2020/speaker/QXJSAH/"&gt;Ryn Daniels&lt;/a&gt;, speaker talked about their experience in DevOps role by providing various illustration of Goose. Talk was awesome and inspiring. You can check out picture of the full house &lt;a href="https://twitter.com/PeetersSimon/status/1224256018105978885?s=20"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Untitled" src="https://akasurde.github.io/images/fosdem/untitled_1.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://twitter.com/the_gundalow"&gt;gundalow&lt;/a&gt; and I started in Ansible room and helping speakers and ushering in the room. Since the room was allocated to Ansible, all talks were related to use cases, customer scenarios and problem solution using Ansible. First session was &lt;a href="https://cfp.cfgmgmtcamp.be/2020/talk/U7CGMZ/"&gt;Maintaining over 40 Ansible modules: 4 years later&lt;/a&gt; by &lt;a href="https://cfp.cfgmgmtcamp.be/2020/speaker/JZ937Y/"&gt;Evgeni Golov&lt;/a&gt; where speaker talked about their experience about Ansible and Foreman modules.&lt;/p&gt;
&lt;p&gt;Next session was &lt;a href="https://cfp.cfgmgmtcamp.be/2020/talk/KSEFVV/"&gt;Ansible Collaboration within your Organization&lt;/a&gt; by &lt;a href="https://cfp.cfgmgmtcamp.be/2020/speaker/MBJSKS/"&gt;Brian Bouterse&lt;/a&gt; and &lt;a href="https://cfp.cfgmgmtcamp.be/2020/speaker/WKJMUJ/"&gt;Oleksandr Saprykin&lt;/a&gt; where we learned about Ansible collaboration within organization using example use case of Galaxy and &lt;a href="https://pulp-ansible.readthedocs.io/"&gt;pulp_ansible&lt;/a&gt; teams.&lt;/p&gt;
&lt;p&gt;Next talk was very interesting where &lt;a href="https://cfp.cfgmgmtcamp.be/2020/speaker/HMXQ7K/"&gt;Eric Kellar&lt;/a&gt; talked about their use case using &lt;a href="https://cfp.cfgmgmtcamp.be/2020/talk/QNSP9S/"&gt;Global Linux client with Ansible and Foreman&lt;/a&gt;. Speaker told us about changing minds about how automation can bring value to our organisation.&lt;/p&gt;
&lt;p&gt;During the dinner party organized by cfgmgmtcamp organizer, we got chance to sit across the table with people from different companies like &lt;a href="https://cfengine.com/"&gt;cfengine&lt;/a&gt; and &lt;a href="https://puppet.com/"&gt;Puppet&lt;/a&gt;. We discussed about various topics like YAML's pros and cons, architecture details about cfengine and puppet, Puppet Bolt vs Ansible, Agentless vs Agentful architecture.
It was fun and engaging discussion which shows true spirit of Open source software where people discuss anything and everything.&lt;/p&gt;
&lt;p&gt;Second day started with keynote by &lt;a href="https://cfp.cfgmgmtcamp.be/2020/speaker/9BEFDC/"&gt;Michael Ducy&lt;/a&gt; where speaker explained about &lt;a href="https://cfp.cfgmgmtcamp.be/2020/talk/YD8UGG/"&gt;Automating Security Response with Serverless&lt;/a&gt; with various open source tools. It gave us a fresh prespective about how to leverage Serverless based automation in their operational roles.&lt;/p&gt;
&lt;p&gt;I took a picture in this talk and it was apt to situation from the movie "Matrix"&lt;/p&gt;
&lt;p&gt;&lt;img alt="matrix" src="https://akasurde.github.io/images/fosdem/matrix_1.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Then I attended a &lt;a href="https://cfp.cfgmgmtcamp.be/2020/talk/AMU8TP/"&gt;talk&lt;/a&gt; by &lt;a href="https://cfp.cfgmgmtcamp.be/2020/speaker/EPWQGN/"&gt;Matthias Dellweg&lt;/a&gt; and &lt;a href="https://cfp.cfgmgmtcamp.be/2020/speaker/MPEXML/"&gt;Bernhard Hopfenmüller&lt;/a&gt; who talked about importance of testing in software development lifecycle. In this talk they provided an insight into Molecule usage and discuss the possibilities and challenges that it brings.&lt;/p&gt;
&lt;p&gt;&lt;img alt="molecule" src="https://akasurde.github.io/images/fosdem/cfg_2.jpg"&gt;&lt;/p&gt;
&lt;p&gt;On the last day of conference, we had a workshop for Ansible &lt;a href="https://cfp.cfgmgmtcamp.be/2020/talk/HH9T93/"&gt;Writing Ansible Modules for fun and profit&lt;/a&gt;. This workshop is helpful for developers and system administrators with some knowledge of Python to develop their custom modules and contribute back to the community. In this workshop, we covered Ansible Module Architecture, Ansible development environment, Ansible Module development, Ansible Contribution process etc., Even though this was the last workshop of the conference, we had a roomful of Ansible enthusiasts and attendees.&lt;/p&gt;
&lt;p&gt;I enjoyed a lot during this visit and will definitely come back next year to attend both conferences. Hope to see you soon in these conference.&lt;/p&gt;</content><category term="conference"></category><category term="open source"></category><category term="ansible"></category><category term="automation"></category><category term="trip report"></category></entry><entry><title>VMware Core Info</title><link href="https://akasurde.github.io/vmware-core-info.html" rel="alternate"></link><published>2020-01-10T12:03:00+05:30</published><updated>2016-01-10T12:03:00+05:30</updated><author><name>Abhijeet Kasurde</name></author><id>tag:akasurde.github.io,2020-01-10:/vmware-core-info.html</id><summary type="html">&lt;p&gt;Using Ansible to retrieve information about VMware objects&lt;/p&gt;</summary><content type="html">&lt;p&gt;Module introduction - vmware_core_info&lt;/p&gt;
&lt;p&gt;User can retrieve information about various VMware objects using Ansible. VMware has recently added REST APIs to communicate with vSphere. Ansible uses these APIs to perform automation related to VMware. In this article, we will be discussing &lt;code&gt;vmware_core_info&lt;/code&gt; Ansible module, which allows user to retrieve information about VMware object.&lt;/p&gt;
&lt;h2&gt;main.yml&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;---&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;hosts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;gather_facts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;no&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;httpapi&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;vars&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;datacenter_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Asia&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Datacenter1&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;vars_files&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;vcenter_vars&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yml&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Get&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Datacenter&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;vmware_core_info&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;object_type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;datacenter&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;register&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;all_dcs&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Get&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;managed&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;datacenter&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;set_fact&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;datacenter_managed_object_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;{{ item.datacenter }}&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;{{ all_dcs.datacenter.value | json_query(dc_query) }}&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;vars&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;dc_query&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;[?name == `{{ datacenter_name }}` ]&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Display&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MoID&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;datacenter&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;{{ datacenter_managed_object_id }}&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Get&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ESXi&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;information&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;vmware_core_info&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;object_type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;filters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;datacenters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;{{ datacenter_managed_object_id }}&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;register&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;esxi_list&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;here, we are using Ansible VMware httpapi plugin to connect to vSphere REST API. You can read more about Ansible httpapi plugin &lt;a href="https://docs.ansible.com/ansible/latest/plugins/httpapi.html"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Using VMware httpapi connection plugin, we are first retrieving datacenter managed object for the given datacenter i.e. "Asia-Datacenter1". Once we have that, we use this value to filter ESXi hostsystems in the given VMware infrastructure.&lt;/p&gt;
&lt;p&gt;You can find about vmware_core_info all options and details &lt;a href="https://docs.ansible.com/ansible/devel/modules/vmware_core_info_module.html"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You can get all the code for this example &lt;a href="https://github.com/Akasurde/ansible-reproducers/tree/master/blog/jan_2020"&gt;here&lt;/a&gt;&lt;/p&gt;</content><category term="vmware"></category><category term="vmware"></category><category term="ansible"></category><category term="automation"></category><category term="command line"></category></entry><entry><title>Any and All</title><link href="https://akasurde.github.io/any-all-python.html" rel="alternate"></link><published>2017-09-01T12:03:00+05:30</published><updated>2017-09-01T12:03:00+05:30</updated><author><name>Abhijeet Kasurde</name></author><id>tag:akasurde.github.io,2017-09-01:/any-all-python.html</id><summary type="html">&lt;p&gt;Test truth values of iterable&lt;/p&gt;</summary><content type="html">&lt;p&gt;Python provides two functions that deal with iterable and return &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt;
depending on which boolean values elements of the sequence evaluate to.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;All&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;all(iterable)&lt;/code&gt; returns &lt;code&gt;True&lt;/code&gt; if all elements of an iterable are considered as true values &lt;/p&gt;
&lt;p&gt;e.g., &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;y&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Python&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Returns False. Not all of the letters are &amp;#39;y&amp;#39;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;Any&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;any(iterable)&lt;/code&gt; returns &lt;code&gt;True&lt;/code&gt; if at least one element of the iterable is a true value&lt;/p&gt;
&lt;p&gt;e.g.,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;any&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;t&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;python&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Returns True. Same as: &amp;#39;t&amp;#39; in &amp;#39;python&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="any, all, python"></category><category term="any"></category><category term="all"></category><category term="python"></category></entry><entry><title>Fibonacci Python Codes</title><link href="https://akasurde.github.io/fibonacci.html" rel="alternate"></link><published>2017-08-31T12:03:00+05:30</published><updated>2016-08-31T12:03:00+05:30</updated><author><name>Abhijeet Kasurde</name></author><id>tag:akasurde.github.io,2017-08-31:/fibonacci.html</id><summary type="html">&lt;p&gt;A few Fibonacci Python implementations&lt;/p&gt;</summary><content type="html">&lt;ul&gt;
&lt;li&gt;Using recursion&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fib2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fib2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;fib2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;Using existing data&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;fibValues&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;fibValues&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fibValues&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;fibValues&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fibValues&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;Using dictionary&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;fib_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fib3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fib_data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;fib_data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fib_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;fib_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fib3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;fib3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fib_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;Using memorization decorator&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;memorize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;cache&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;memorizedFunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;memorizedFunction&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cache&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cache&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;memorizedFunction&lt;/span&gt;

&lt;span class="nd"&gt;@memorize&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fib4&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fib4&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;fib4&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;The ugly way&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;fib5_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fib5&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fib5_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;fib5_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fib5_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fib5_data&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;fib5_data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fib5_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;fib5_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fib5_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;Another way&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fib6&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Some of the code is shamelessly copied from &lt;a href="https://jeremykun.com/2012/01/12/a-spoonful-of-python/"&gt;Jeremy Kun's Blog&lt;/a&gt;&lt;/p&gt;</content><category term="python, dynamic programming, algorithms, fibonacci"></category><category term="python"></category><category term="dynamic programming"></category><category term="algorithms"></category><category term="fibonacci"></category></entry><entry><title>Palindrome</title><link href="https://akasurde.github.io/python.html" rel="alternate"></link><published>2017-08-30T12:03:00+05:30</published><updated>2016-08-30T12:03:00+05:30</updated><author><name>Abhijeet Kasurde</name></author><id>tag:akasurde.github.io,2017-08-30:/python.html</id><summary type="html">&lt;p&gt;Palindrome&lt;/p&gt;</summary><content type="html">&lt;ul&gt;
&lt;li&gt;Check if characters of a given string can be rearranged to form a palindrome or not&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Counter&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pytest&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;palindrome_detect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="c1"&gt;# Testcases&lt;/span&gt;
&lt;span class="nd"&gt;@pytest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mark&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parametrize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;string, palindrome&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,[&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;aa&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;aabb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;nniit&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;aaabbbccc&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;abc&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_sample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;palindrome&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;palindrome_detect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;palindrome&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="programming, alogrithms, palindrome"></category><category term="python"></category><category term="programming"></category><category term="alogrithms"></category><category term="palindrome"></category></entry><entry><title>Installing Cryptography in MacOS</title><link href="https://akasurde.github.io/installing-cryptography-in-macos.html" rel="alternate"></link><published>2017-08-14T12:03:00+05:30</published><updated>2017-08-14T12:03:00+05:30</updated><author><name>Abhijeet Kasurde</name></author><id>tag:akasurde.github.io,2017-08-14:/installing-cryptography-in-macos.html</id><summary type="html">&lt;p&gt;Installing cryptography in MacOS&lt;/p&gt;</summary><content type="html">&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If you face error while installing Cryptography in MacOS then use following command ::&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;
pip install cryptography --global-option=build_ext --global-option="-L/usr/local/opt/openssl/lib" --global-option="-I/usr/local/opt/openssl/include"
&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="cryptography, macos"></category><category term="macos"></category><category term="cryptography"></category><category term="command-line"></category></entry><entry><title>Check Public Private Key pair</title><link href="https://akasurde.github.io/openssl-public-private-key-pair.html" rel="alternate"></link><published>2017-05-25T12:03:00+05:30</published><updated>2017-05-25T12:03:00+05:30</updated><author><name>Abhijeet Kasurde</name></author><id>tag:akasurde.github.io,2017-05-25:/openssl-public-private-key-pair.html</id><summary type="html">&lt;p&gt;Check Public Private Key Pair using openssl&lt;/p&gt;</summary><content type="html">&lt;p&gt;OpenSSL commands can be used to check if Public and Private Key are in pair or not&lt;/p&gt;
&lt;p&gt;&lt;img alt="openssl" src="https://akasurde.github.io/images/image_5.png"&gt;&lt;/p&gt;</content><category term="openssl"></category><category term="openssl"></category></entry><entry><title>How to enable EPEL repository in RHEL 7 and CentOS 7?</title><link href="https://akasurde.github.io/how-to-enable-epel-repo-centos-rhel-7.html" rel="alternate"></link><published>2017-05-18T12:03:00+05:30</published><updated>2017-05-18T12:03:00+05:30</updated><author><name>Abhijeet Kasurde</name></author><id>tag:akasurde.github.io,2017-05-18:/how-to-enable-epel-repo-centos-rhel-7.html</id><summary type="html">&lt;p&gt;How to enable EPEL repository in RHEL 7 and CentOS 7?&lt;/p&gt;</summary><content type="html">&lt;h1&gt;EPEL&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;For RHEL 7 and CentOS 7 (64 bit)&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;$ rpm -ivh http://dl.fedoraproject.org/pub/epel/7/x86_64/e/epel-release-7-9.noarch.rpm
&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;For RHEL 6 and CentOS 6 (64 bit)&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;$ rpm -ivh  http://download.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm
&lt;/pre&gt;</content><category term="epel, linux, rhel, centos"></category><category term="epel"></category><category term="linux"></category><category term="package"></category><category term="rpm"></category></entry><entry><title>Ansible Dynamic Inventory Example</title><link href="https://akasurde.github.io/ansible-dynamic-inventory-example.html" rel="alternate"></link><published>2017-05-12T12:03:00+05:30</published><updated>2017-05-12T12:03:00+05:30</updated><author><name>Abhijeet Kasurde</name></author><id>tag:akasurde.github.io,2017-05-12:/ansible-dynamic-inventory-example.html</id><summary type="html">&lt;p&gt;Example of Ansible Dynamic Inventory&lt;/p&gt;</summary><content type="html">&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;argparse&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;

&lt;span class="n"&gt;ANSIBLE_INV&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;dbserver&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;hosts&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;10.65.100.10&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;vars&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;ansible_password&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Secret1234&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;ansible_user&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;devops&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;output_list_inventory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;json_output&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;json_output&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;

    &lt;span class="c1"&gt;# Argument parsing&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;argparse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ArgumentParser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Ansible dynamic inventory&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;--list&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Ansible inventory of all of the groups&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;store_true&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;list_inventory&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;--host&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Ansible inventory of a particular host&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;store&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ansible_host&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;cli_args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse_args&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;list_inventory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cli_args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;list_inventory&lt;/span&gt;
    &lt;span class="n"&gt;ansible_host&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cli_args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ansible_host&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;list_inventory&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;output_list_inventory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ANSIBLE_INV&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="ansible, linux, rhel, centos"></category><category term="ansible"></category><category term="linux"></category></entry><entry><title>Extract public key from pem and convert to ssh-RSA format</title><link href="https://akasurde.github.io/openssl-openssh-pem-to-ssh-rsa.html" rel="alternate"></link><published>2017-05-12T12:03:00+05:30</published><updated>2017-05-12T12:03:00+05:30</updated><author><name>Abhijeet Kasurde</name></author><id>tag:akasurde.github.io,2017-05-12:/openssl-openssh-pem-to-ssh-rsa.html</id><summary type="html">&lt;p&gt;Extract public key from pem and convert to ssh-rsa format&lt;/p&gt;</summary><content type="html">&lt;p&gt;In order to extract public key from pem and convert to ssh-RSA format, perform following commands&lt;/p&gt;
&lt;pre&gt;$ openssl rsa -in PUBLICKEY.pem -pubout &gt; PUBLICKEY.pub&lt;/pre&gt;

&lt;pre&gt;$ ssh-keygen -f PUBLICKEY.pub -i -m PKCS8 &lt;/pre&gt;</content><category term="openssl"></category><category term="openssl"></category><category term="openssh"></category></entry><entry><title>Skip Python SSL verification check</title><link href="https://akasurde.github.io/python-ssl-verification.html" rel="alternate"></link><published>2017-04-01T12:03:00+05:30</published><updated>2017-04-01T12:03:00+05:30</updated><author><name>Abhijeet Kasurde</name></author><id>tag:akasurde.github.io,2017-04-01:/python-ssl-verification.html</id><summary type="html">&lt;p&gt;Skip Python SSL verification check&lt;/p&gt;</summary><content type="html">&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If you want to skip Python SSL verification check then &lt;/p&gt;
&lt;p&gt;&lt;pre&gt;$ export PYTHONHTTPSVERIFY=0&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="Python"></category><category term="python"></category><category term="cheat-sheet"></category><category term="openssl"></category></entry><entry><title>Python - UTF-8 ValueError</title><link href="https://akasurde.github.io/python-macosx-utf8-valuerror.html" rel="alternate"></link><published>2017-03-17T12:03:00+05:30</published><updated>2016-03-17T12:03:00+05:30</updated><author><name>Abhijeet Kasurde</name></author><id>tag:akasurde.github.io,2017-03-17:/python-macosx-utf8-valuerror.html</id><summary type="html">&lt;p&gt;Mac OS X: ValueError: unknown locale: UTF-8 in Python&lt;/p&gt;</summary><content type="html">&lt;p&gt;If you get the error on MacOS X, here's the quick fix - add these lines to your &lt;code&gt;~/.bash_profile&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;
export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8
&lt;/pre&gt;</content><category term="Python, MacOSX"></category><category term="Python"></category><category term="osx"></category><category term="mac"></category><category term="django"></category><category term="utf8"></category><category term="valueerror"></category><category term="locale"></category></entry><entry><title>Git - CIA cheatsheet</title><link href="https://akasurde.github.io/git-cheat-sheet-cia-edition.html" rel="alternate"></link><published>2017-03-11T12:03:00+05:30</published><updated>2016-03-11T12:03:00+05:30</updated><author><name>Abhijeet Kasurde</name></author><id>tag:akasurde.github.io,2017-03-11:/git-cheat-sheet-cia-edition.html</id><summary type="html">&lt;p&gt;Git - CIA Cheatsheet&lt;/p&gt;</summary><content type="html">&lt;p&gt;Shamelessly taken from - https://wikileaks.org/ciav7p1/cms/page_1179773.html&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;List Aliases&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;$ git config --get-regexp 'alias.*' | colrm 1 6 &lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use last commit message for amend&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;$ git commit --amend -C HEAD &lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Undo last commit and bring everything to staging area&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;$ git reset --soft HEAD^ &lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Undo last commit and restart everything&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;$ git reset --hard HEAD^ &lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create new branch with Stash changes&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;$ git stash branch new-branch-name &lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Git status in short format&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;$ git status -s &lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="git"></category><category term="git"></category></entry><entry><title>Git commands without SSL verify</title><link href="https://akasurde.github.io/git-no-ssl-verify.html" rel="alternate"></link><published>2017-02-14T12:03:00+05:30</published><updated>2017-02-14T12:03:00+05:30</updated><author><name>Abhijeet Kasurde</name></author><id>tag:akasurde.github.io,2017-02-14:/git-no-ssl-verify.html</id><summary type="html">&lt;p&gt;Git commands without SSL verify&lt;/p&gt;</summary><content type="html">&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Use git commands on a git server without proper SSL certificate &lt;/p&gt;
&lt;p&gt;&lt;pre&gt;$ env GIT_SSL_NO_VERIFY=true git COMMAND&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To disable SSL certificate checking for repo only&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;$ git config http.sslVerify "false"&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To disable SSL certificate checking for all repos&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;$ git config --global http.sslVerify "false"&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="git"></category><category term="git"></category><category term="cheat-sheet"></category></entry><entry><title>Design Patterns illustrated using Python</title><link href="https://akasurde.github.io/python-design-patterns.html" rel="alternate"></link><published>2017-02-13T12:03:00+05:30</published><updated>2017-02-13T12:03:00+05:30</updated><author><name>Abhijeet Kasurde</name></author><id>tag:akasurde.github.io,2017-02-13:/python-design-patterns.html</id><summary type="html">&lt;p&gt;Design Patterns illustrated using Python&lt;/p&gt;</summary><content type="html">&lt;p&gt;Image courtesy : &lt;a href="https://www.youtube.com/watch?v=Vp7q_pE7Fzg"&gt;in28mintues&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Mind Map for Python Design Pattern" src="https://akasurde.github.io/images/design-pattern.png"&gt;&lt;/p&gt;
&lt;p&gt;You can find the code for design patterns &lt;a href="https://github.com/Akasurde/Design-Patterns-in-Python"&gt;here&lt;/a&gt;&lt;/p&gt;</content><category term="python, design-pattern"></category><category term="python"></category><category term="design-pattern"></category></entry><entry><title>Git Reflog - Time Machine</title><link href="https://akasurde.github.io/git-reflog-time-machine.html" rel="alternate"></link><published>2017-02-11T12:03:00+05:30</published><updated>2017-02-11T12:03:00+05:30</updated><author><name>Abhijeet Kasurde</name></author><id>tag:akasurde.github.io,2017-02-11:/git-reflog-time-machine.html</id><summary type="html">&lt;p&gt;Git Reflog a.k.a. Time Machine&lt;/p&gt;</summary><content type="html">&lt;p&gt;Git reflog can be used to get you out of mess&lt;/p&gt;
&lt;p&gt;&lt;img alt="Initial commit" src="https://akasurde.github.io/images/image_1.png"&gt;
&lt;img alt="commit 2" src="https://akasurde.github.io/images/image_2.png"&gt;
&lt;img alt="commit 3" src="https://akasurde.github.io/images/image_3.png"&gt;
&lt;img alt="Using git reflog" src="https://akasurde.github.io/images/image_4.png"&gt;&lt;/p&gt;</content><category term="git"></category><category term="git"></category></entry><entry><title>RAID</title><link href="https://akasurde.github.io/raid.html" rel="alternate"></link><published>2017-01-27T12:03:00+05:30</published><updated>2017-01-27T12:03:00+05:30</updated><author><name>Abhijeet Kasurde</name></author><id>tag:akasurde.github.io,2017-01-27:/raid.html</id><summary type="html">&lt;p&gt;RAID&lt;/p&gt;</summary><content type="html">&lt;h1&gt;RAID&lt;/h1&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;RAID LEVEL&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Minimum disk&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Level 0&lt;/td&gt;
&lt;td&gt;Block Level stripping without parity&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Level 1&lt;/td&gt;
&lt;td&gt;Mirroring without parity&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Level 2&lt;/td&gt;
&lt;td&gt;Bit level striping&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Level 3&lt;/td&gt;
&lt;td&gt;Byte level stripping with dedicated parity&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Level 4&lt;/td&gt;
&lt;td&gt;Block level stripping with dedicated parity&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Level 5&lt;/td&gt;
&lt;td&gt;Block level stripping with distributed parity&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Level 6&lt;/td&gt;
&lt;td&gt;Block level stripping with double distribute parity&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</content><category term="raid"></category><category term="raid"></category></entry><entry><title>Using OCSP with Apache and mod_nss on CentOS 7</title><link href="https://akasurde.github.io/ocsp-mod-nss-httpd-centos.html" rel="alternate"></link><published>2017-01-17T12:03:00+05:30</published><updated>2017-01-17T12:03:00+05:30</updated><author><name>Abhijeet Kasurde</name></author><id>tag:akasurde.github.io,2017-01-17:/ocsp-mod-nss-httpd-centos.html</id><summary type="html">&lt;p&gt;Using OCSP with Apache and mod_nss on CentOS 7&lt;/p&gt;</summary><content type="html">&lt;p&gt;Following steps will guide you how to configure OCSP with Apache and mod_nss&lt;/p&gt;
&lt;p&gt;In this example, we will configure client certificate authentication using mod_nss and OCSP.&lt;/p&gt;
&lt;p&gt;For this setup, we will use two servers&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cybertron.testrelm.test&lt;/li&gt;
&lt;li&gt;tiger.testrelm.test&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;cybertron&lt;/code&gt; will be &lt;a href="http://www.freeipa.org/page/Main_Page"&gt;FreeIPA server&lt;/a&gt; and &lt;code&gt;tiger&lt;/code&gt; will be httpd server.&lt;/p&gt;
&lt;p&gt;Let us get started -&lt;/p&gt;
&lt;h2&gt;Installing FreeIPA server on &lt;code&gt;cybertron&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;FreeIPA provides &lt;code&gt;OCSP&lt;/code&gt; server, so we will install and configure FreeIPA server.&lt;/p&gt;
&lt;pre&gt;[root@cybertron ~]# yum install -y ipa-server ipa-server-dns
[root@cybertron ~]# ipa-server-install --ip-address $(ip addr|grep "global"|cut -d " " -f6|cut -d "/" -f1|head -n 1) -r testrelm.test -p 'Secret123' -a 'Secret123' --setup-dns --forwarder 192.168.12.255 -U

The log file for this installation can be found in /var/log/ipaserver-install.log
==============================================================================
This program will set up the IPA Server.

This includes:
  * Configure a stand-alone CA (dogtag) for certificate management
  * Configure the Network Time Daemon (ntpd)
  * Create and configure an instance of Directory Server
  * Create and configure a Kerberos Key Distribution Center (KDC)
  * Configure Apache (httpd)
  * Configure DNS (bind)

WARNING: conflicting time&amp;date synchronization service 'chronyd' will be disabled
in favor of ntpd

Warning: skipping DNS resolution of host cybertron.testrelm.test
The domain name has been determined based on the host name.

Checking DNS domain testrelm.test., please wait ...
Checking DNS forwarders, please wait ...

The IPA Master Server will be configured with:
Hostname:       cybertron.testrelm.test
IP address(es): 192.168.12.1
Domain name:    testrelm.test
Realm name:     TESTRELM.TEST

BIND DNS server will be configured to serve IPA domain with:
Forwarders:       192.168.12.255
Forward policy:   only
Reverse zone(s):  No reverse zone

Configuring NTP daemon (ntpd)
  [1/4]: stopping ntpd
  [2/4]: writing configuration
  [3/4]: configuring ntpd to start on boot
  [4/4]: starting ntpd
Done configuring NTP daemon (ntpd).
Configuring directory server (dirsrv). Estimated time: 1 minute
  [1/47]: creating directory server user
  [2/47]: creating directory server instance
  [3/47]: updating configuration in dse.ldif
  [4/47]: restarting directory server
  [5/47]: adding default schema
  [6/47]: enabling memberof plugin
  [7/47]: enabling winsync plugin
  [8/47]: configuring replication version plugin
  [9/47]: enabling IPA enrollment plugin
  [10/47]: enabling ldapi
  [11/47]: configuring uniqueness plugin
  [12/47]: configuring uuid plugin
  [13/47]: configuring modrdn plugin
  [14/47]: configuring DNS plugin
  [15/47]: enabling entryUSN plugin
  [16/47]: configuring lockout plugin
  [17/47]: configuring topology plugin
  [18/47]: creating indices
  [19/47]: enabling referential integrity plugin
  [20/47]: configuring certmap.conf
  [21/47]: configure autobind for root
  [22/47]: configure new location for managed entries
  [23/47]: configure dirsrv ccache
  [24/47]: enabling SASL mapping fallback
  [25/47]: restarting directory server
  [26/47]: adding sasl mappings to the directory
  [27/47]: adding default layout
  [28/47]: adding delegation layout
  [29/47]: creating container for managed entries
  [30/47]: configuring user private groups
  [31/47]: configuring netgroups from hostgroups
  [32/47]: creating default Sudo bind user
  [33/47]: creating default Auto Member layout
  [34/47]: adding range check plugin
  [35/47]: creating default HBAC rule allow_all
  [36/47]: adding sasl mappings to the directory
  [37/47]: adding entries for topology management
  [38/47]: initializing group membership
  [39/47]: adding master entry
  [40/47]: initializing domain level
  [41/47]: configuring Posix uid/gid generation
  [42/47]: adding replication acis
  [43/47]: enabling compatibility plugin
  [44/47]: activating sidgen plugin
  [45/47]: activating extdom plugin
  [46/47]: tuning directory server
  [47/47]: configuring directory to start on boot
Done configuring directory server (dirsrv).
Configuring certificate server (pki-tomcatd). Estimated time: 3 minutes 30 seconds
  [1/31]: creating certificate server user
  [2/31]: configuring certificate server instance
  [3/31]: stopping certificate server instance to update CS.cfg
  [4/31]: backing up CS.cfg
  [5/31]: disabling nonces
  [6/31]: set up CRL publishing
  [7/31]: enable PKIX certificate path discovery and validation
  [8/31]: starting certificate server instance
  [9/31]: creating RA agent certificate database
  [10/31]: importing CA chain to RA certificate database
  [11/31]: fixing RA database permissions
  [12/31]: setting up signing cert profile
  [13/31]: setting audit signing renewal to 2 years
  [14/31]: restarting certificate server
  [15/31]: requesting RA certificate from CA
  [16/31]: issuing RA agent certificate
  [17/31]: adding RA agent as a trusted user
  [18/31]: authorizing RA to modify profiles
  [19/31]: authorizing RA to manage lightweight CAs
  [20/31]: Ensure lightweight CAs container exists
  [21/31]: configure certmonger for renewals
  [22/31]: configure certificate renewals
  [23/31]: configure RA certificate renewal
  [24/31]: configure Server-Cert certificate renewal
  [25/31]: Configure HTTP to proxy connections
  [26/31]: restarting certificate server
  [27/31]: migrating certificate profiles to LDAP
  [28/31]: importing IPA certificate profiles
  [29/31]: adding default CA ACL
  [30/31]: adding 'ipa' CA entry
  [31/31]: updating IPA configuration
Done configuring certificate server (pki-tomcatd).
Configuring directory server (dirsrv). Estimated time: 10 seconds
  [1/3]: configuring ssl for ds instance
  [2/3]: restarting directory server
  [3/3]: adding CA certificate entry
Done configuring directory server (dirsrv).
Configuring Kerberos KDC (krb5kdc). Estimated time: 30 seconds
  [1/9]: adding kerberos container to the directory
  [2/9]: configuring KDC
  [3/9]: initialize kerberos container
  [4/9]: adding default ACIs
  [5/9]: creating a keytab for the directory
  [6/9]: creating a keytab for the machine
  [7/9]: adding the password extension to the directory
  [8/9]: starting the KDC
  [9/9]: configuring KDC to start on boot
Done configuring Kerberos KDC (krb5kdc).
Configuring kadmin
  [1/2]: starting kadmin
  [2/2]: configuring kadmin to start on boot
Done configuring kadmin.
Configuring ipa_memcached
  [1/2]: starting ipa_memcached
  [2/2]: configuring ipa_memcached to start on boot
Done configuring ipa_memcached.
Configuring ipa-otpd
  [1/2]: starting ipa-otpd
  [2/2]: configuring ipa-otpd to start on boot
Done configuring ipa-otpd.
Configuring ipa-custodia
  [1/5]: Generating ipa-custodia config file
  [2/5]: Making sure custodia container exists
  [3/5]: Generating ipa-custodia keys
  [4/5]: starting ipa-custodia
  [5/5]: configuring ipa-custodia to start on boot
Done configuring ipa-custodia.
Configuring the web interface (httpd). Estimated time: 1 minute
  [1/21]: setting mod_nss port to 443
  [2/21]: setting mod_nss cipher suite
  [3/21]: setting mod_nss protocol list to TLSv1.0 - TLSv1.2
  [4/21]: setting mod_nss password file
  [5/21]: enabling mod_nss renegotiate
  [6/21]: adding URL rewriting rules
  [7/21]: configuring httpd
  [8/21]: configure certmonger for renewals
  [9/21]: setting up httpd keytab
  [10/21]: setting up ssl
  [11/21]: importing CA certificates from LDAP
  [12/21]: setting up browser autoconfig
  [13/21]: publish CA cert
  [14/21]: clean up any existing httpd ccache
  [15/21]: configuring SELinux for httpd
  [16/21]: create KDC proxy user
  [17/21]: create KDC proxy config
  [18/21]: enable KDC proxy
  [19/21]: restarting httpd
  [20/21]: configuring httpd to start on boot
  [21/21]: enabling oddjobd
Done configuring the web interface (httpd).
Applying LDAP updates
Upgrading IPA:
  [1/9]: stopping directory server
  [2/9]: saving configuration
  [3/9]: disabling listeners
  [4/9]: enabling DS global lock
  [5/9]: starting directory server
  [6/9]: upgrading server
  [7/9]: stopping directory server
  [8/9]: restoring configuration
  [9/9]: starting directory server
Done.
Restarting the directory server
Restarting the KDC
Configuring DNS (named)
  [1/11]: generating rndc key file
  [2/11]: adding DNS container
  [3/11]: setting up our zone
  [4/11]: setting up our own record
  [5/11]: setting up records for other masters
  [6/11]: adding NS record to the zones
  [7/11]: setting up kerberos principal
  [8/11]: setting up named.conf
  [9/11]: setting up server configuration
  [10/11]: configuring named to start on boot
  [11/11]: changing resolv.conf to point to ourselves
Done configuring DNS (named).
Configuring DNS key synchronization service (ipa-dnskeysyncd)
  [1/7]: checking status
  [2/7]: setting up bind-dyndb-ldap working directory
  [3/7]: setting up kerberos principal
  [4/7]: setting up SoftHSM
  [5/7]: adding DNSSEC containers
  [6/7]: creating replica keys
  [7/7]: configuring ipa-dnskeysyncd to start on boot
Done configuring DNS key synchronization service (ipa-dnskeysyncd).
Restarting ipa-dnskeysyncd
Restarting named
Updating DNS system records
Restarting the web server
Configuring client side components
Using existing certificate '/etc/ipa/ca.crt'.
Client hostname: cybertron.testrelm.test
Realm: TESTRELM.TEST
DNS Domain: testrelm.test
IPA Server: cybertron.testrelm.test
BaseDN: dc=testrelm,dc=test

Skipping synchronizing time with NTP server.
New SSSD config will be created
Configured sudoers in /etc/nsswitch.conf
Configured /etc/sssd/sssd.conf
trying https://cybertron.testrelm.test/ipa/json
Forwarding 'schema' to json server 'https://cybertron.testrelm.test/ipa/json'
trying https://cybertron.testrelm.test/ipa/session/json
Forwarding 'ping' to json server 'https://cybertron.testrelm.test/ipa/session/json'
Forwarding 'ca_is_enabled' to json server 'https://cybertron.testrelm.test/ipa/session/json'
Systemwide CA database updated.
Adding SSH public key from /etc/ssh/ssh_host_rsa_key.pub
Adding SSH public key from /etc/ssh/ssh_host_ecdsa_key.pub
Adding SSH public key from /etc/ssh/ssh_host_ed25519_key.pub
Forwarding 'host_mod' to json server 'https://cybertron.testrelm.test/ipa/session/json'
SSSD enabled
Configured /etc/openldap/ldap.conf
Configured /etc/ssh/ssh_config
Configured /etc/ssh/sshd_config
Configuring testrelm.test as NIS domain.
Client configuration complete.

==============================================================================
Setup complete

Next steps:
    1. You must make sure these network ports are open:
        TCP Ports:
          * 80, 443: HTTP/HTTPS
          * 389, 636: LDAP/LDAPS
          * 88, 464: kerberos
          * 53: bind
        UDP Ports:
          * 88, 464: kerberos
          * 53: bind
          * 123: ntp
2. You can now obtain a kerberos ticket using the command: 'kinit admin'
       This ticket will allow you to use the IPA tools (e.g., ipa user-add)
       and the web user interface.

Be sure to back up the CA certificates stored in /root/cacert.p12
These files are required to create replicas. The password for these
files is the Directory Manager password&lt;/pre&gt;

&lt;h2&gt;Create a user&lt;/h2&gt;
&lt;p&gt;Now, we will create a FreeIPA User which will be used in client authentication.&lt;/p&gt;
&lt;pre&gt;
[root@cybertron ~]# echo Secret123 | kinit admin
Password for admin@TESTRELM.TEST:
[root@cybertron temp]# echo Secret123 | ipa user-add --first testuser1 --last testuser1 testuser1 --password
----------------------
Added user "testuser1"
----------------------
  User login: testuser1
  First name: testuser1
  Last name: testuser1
  Full name: testuser1 testuser1
  Display name: testuser1 testuser1
  Initials: tt
  Home directory: /home/testuser1
  GECOS: testuser1 testuser1
  Login shell: /bin/sh
  Principal name: testuser1@TESTRELM.TEST
  Principal alias: testuser1@TESTRELM.TEST
  Email address: testuser1@testrelm.test
  UID: 539800003
  GID: 539800003
  Password: True
  Member of groups: ipausers
  Kerberos keys available: True&lt;/pre&gt;

&lt;h2&gt;Issue user certificate using FreeIPA&lt;/h2&gt;
&lt;p&gt;FreeIPA provides user certificates which can be used in client certificate authentication&lt;/p&gt;
&lt;pre&gt;
[root@cybertron ~]# ipa cert-request testuser1.csr --principal=testuser1@TESTRELM.TEST
  Issuing CA: ipa
  Certificate: MIIEDzCCAvegAwIBAgIBCzANBgkqhkiG9w0BAQsFADA4MRYwFAYDVQQKDA1URVNUUkVMTS5URVNUMR4wHAYDVQQDDBVDZXJ0aWZpY2F0ZSBBdXRob3JpdHkwHhcNMTcwMTE2MTExMjQyWhcNMTkwMTE3MTExMjQyWjAsMRYwFAYDVQQKDA1URVNUUkVMTS5URVNUMRIwEAYDVQQDDAl0ZXN0dXNlcjEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDM4943Ob29NVHgGZp+3WBAJ6mvOTTMjMfpmGy403jV1OUjDAfpTiMzye9TRCG83nUmGIH4CGI7rnbXtII3amEZKHjD6IRZWy/JLd6mvVL/Ab5P2GyInLvO5RFFFyzKcKQZix5GOHAGUXnX/uasB0lSQXazP+2tCKfsLdLCAnBCxZvatHcfFOK144STi4eNxnuTZHAgVU/zLclKVB6TK/8JfeX+/yyaeJUuAy/Zb5VmVu23NsIAQQxuGgzRZXQ2zoUuNi8MIwBm6bJoxVNiYhIyrXSTPzy/7lG4RHX8rseHkH8x1Xy+FHfkxAF49CTgYGKcMDh5gbEe6WCXdICAx+hHAgMBAAGjggEuMIIBKjAfBgNVHSMEGDAWgBQY/O/BU12jCr6vNtv674I0pv2IOTA/BggrBgEFBQcBAQQzMDEwLwYIKwYBBQUHMAGGI2h0dHA6Ly9pcGEtY2EudGVzdHJlbG0udGVzdC9jYS9vY3NwMA4GA1UdDwEB/wQEAwIE8DAdBgNVHSUEFjAUBggrBgEFBQcDAQYIKwYBBQUHAwIweAYDVR0fBHEwbzBtoDWgM4YxaHR0cDovL2lwYS1jYS50ZXN0cmVsbS50ZXN0L2lwYS9jcmwvTWFzdGVyQ1JMLmJpbqI0pDIwMDEOMAwGA1UECgwFaXBhY2ExHjAcBgNVBAMMFUNlcnRpZmljYXRlIEF1dGhvcml0eTAdBgNVHQ4EFgQUI3v2p7d+WDzcjyghbIFqDyhnTXYwDQYJKoZIhvcNAQELBQADggEBAMaq+VnGPOi5d9LhY2OomI9tThNebpJf118U/WPAKSdGP/ptYFARtjkdHYPmb7XNVYqI6qloTUHVCU5WxMsCmt6ElayCeTbazr5l7mfkTpY2XvAxtI8UWcNMQiOF/YaZBjYCQOPFwfjlAdJ49RjRcXnFxsZ9lq2xFhyeYOLUx7GqFM5O+Sw7UpLPYpZ29i4fUmEdsbnFq57ep9bxrNhUjxruchOHI9BhWcxAwuguurxOoOvpVurmgC96vlpl0thBtcbkUV6eAbnY6nX2VQ4p9vpqL90cCVz4EEaMTW1Aw4VzZqS3UzkMLP4yCLfs5eI/P4/wdG3XhD9axkPgcdy60Ns=
  Subject: CN=testuser1,O=TESTRELM.TEST
  Issuer: CN=Certificate Authority,O=TESTRELM.TEST
  Not Before: Mon Jan 16 11:12:42 2017 UTC
  Not After: Thu Jan 17 11:12:42 2019 UTC
  Fingerprint (MD5): 12:cd:91:d9:a3:46:74:b2:47:ec:b7:68:e0:5a:bc:59
  Fingerprint (SHA1): 32:3e:b6:c2:c8:91:81:d2:15:65:51:d0:2d:de:a9:95:38:e5:04:ea
  Serial number: 11
  Serial number (hex): 0xB&lt;/pre&gt;

&lt;h2&gt;Issue Server certificate for httpd server&lt;/h2&gt;
&lt;pre&gt;[root@cybertron temp]# ipa cert-request server1.csr --principal=http/tiger.testrelm.test@TESTRELM.TEST --add
  Issuing CA: ipa
  Certificate: MIIEGjCCAwKgAwIBAgIBDDANBgkqhkiG9w0BAQsFADA4MRYwFAYDVQQKDA1URVNUUkVMTS5URVNUMR4wHAYDVQQDDBVDZXJ0aWZpY2F0ZSBBdXRob3JpdHkwHhcNMTcwMTE2MTE0MTA2WhcNMTkwMTE3MTE0MTA2WjA3MRYwFAYDVQQKDA1URVNUUkVMTS5URVNUMR0wGwYDVQQDDBR0aWdnZXIudGVzdHJlbG0udGVzdDCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAKI0ZHoJL4h4g8WYovnSc7JA1v/Fs7spG9fEphzKC0dsOGPeFz9O39GH/xZDnVizg9wcD7dqHevHPSjIDa/4Myi7y86AUqWgLZPBLX9PXcStunFi/KbJngJza6DqqB6s6g6f0Nsex4ff+CuaJll6M8WaIdO0piavlZdiff3ciOvTvq0HiE4LPEHdt812Owk6xojF/5lOgoQKtsd7kzZ79DWxSTQQ7XLgvh4dr4cKNhBIpMLjAENSLfqIQ9QyGdOSZICY95fmgQJGIwmnzun7wfoabedYvB3ZsvsexRT+bZ3PIxDaPoT8gFW69d2qu65/Sp32dsq97rNQ0TBW/CmKdR8CAwEAAaOCAS4wggEqMB8GA1UdIwQYMBaAFBj878FTXaMKvq822/rvgjSm/Yg5MD8GCCsGAQUFBwEBBDMwMTAvBggrBgEFBQcwAYYjaHR0cDovL2lwYS1jYS50ZXN0cmVsbS50ZXN0L2NhL29jc3AwDgYDVR0PAQH/BAQDAgTwMB0GA1UdJQQWMBQGCCsGAQUFBwMBBggrBgEFBQcDAjB4BgNVHR8EcTBvMG2gNaAzhjFodHRwOi8vaXBhLWNhLnRlc3RyZWxtLnRlc3QvaXBhL2NybC9NYXN0ZXJDUkwuYmluojSkMjAwMQ4wDAYDVQQKDAVpcGFjYTEeMBwGA1UEAwwVQ2VydGlmaWNhdGUgQXV0aG9yaXR5MB0GA1UdDgQWBBQ7DX/T/1VjuTNnFP6bcsVJgmFkhzANBgkqhkiG9w0BAQsFAAOCAQEAqpPf4eDPkYzmUa1PxmwGr96du0pX9OZyZn1uVqDLlusRvtTR0u0GY6dtk55BNrsbCbIPDMN11XaX3pajfCxNqWsNJaaPMV0s3JjgmLukZqCTF5NsmBkuz6OYnwqvTm5n6GLlMQWUisbwUdm0j6fSA4t9qvQHIafT5mS6dUZhS1LpGG6j/R3ycVdMaVDVIbu0zc9tzNxo8ebb6+f0UyHZ7UpavKMeJGo5vWwwHm52BBKR4WzN3VFMoyrxbCG7ctLw1MjOsLqEl+dz7IilWHidrEDnWAc0duC+AJ/hUo13zk3tqITOnSb99yoNhGhtO9PU/OqoMlr8LW/FhNrOv2W4/Q==
  Subject: CN=tiger.testrelm.test,O=TESTRELM.TEST
  Issuer: CN=Certificate Authority,O=TESTRELM.TEST
  Not Before: Mon Jan 16 11:41:06 2017 UTC
  Not After: Thu Jan 17 11:41:06 2019 UTC
  Fingerprint (MD5): b6:70:4b:f9:c0:0b:78:d9:52:a1:41:3d:6d:f7:55:01
  Fingerprint (SHA1): 84:43:b5:ee:f6:cc:0d:dc:9e:f0:e7:1a:91:c4:eb:b4:42:c5:10:ae
  Serial number: 12
  Serial number (hex): 0xC&lt;/pre&gt;

&lt;h2&gt;Installing mod_nss on httpd server&lt;/h2&gt;
&lt;p&gt;Let us install mod_nss on httpd server i.e. &lt;code&gt;tiger.testrelm.test&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;[root@tiger ~]# yum install -y mod_nss
Failed to set locale, defaulting to C
Loaded plugins: product-id, search-disabled-repos, security, subscription-manager
This system is not registered with an entitlement server. You can use subscription-manager to register.
Setting up Install Process
Resolving Dependencies
--&gt; Running transaction check
---&gt; Package mod_nss.x86_64 0:1.0.10-9.el6 will be installed
beaker-Server/filelists_db                                                                               | 3.4 MB     00:00
--&gt; Processing Dependency: httpd-mmn = 20051115 for package: mod_nss-1.0.10-9.el6.x86_64
--&gt; Processing Dependency: httpd for package: mod_nss-1.0.10-9.el6.x86_64
--&gt; Running transaction check
---&gt; Package httpd.x86_64 0:2.2.15-59.el6 will be installed
--&gt; Processing Dependency: httpd-tools = 2.2.15-59.el6 for package: httpd-2.2.15-59.el6.x86_64
--&gt; Processing Dependency: apr-util-ldap for package: httpd-2.2.15-59.el6.x86_64
--&gt; Running transaction check
---&gt; Package apr-util-ldap.x86_64 0:1.3.9-3.el6_0.1 will be installed
---&gt; Package httpd-tools.x86_64 0:2.2.15-59.el6 will be installed
--&gt; Finished Dependency Resolution

Dependencies Resolved

================================================================================================================================
 Package                        Arch                    Version                            Repository                      Size
================================================================================================================================
Installing:
 mod_nss                        x86_64                  1.0.10-9.el6                       beaker-Server                   96 k
Installing for dependencies:
 apr-util-ldap                  x86_64                  1.3.9-3.el6_0.1                    beaker-Server                   15 k
 httpd                          x86_64                  2.2.15-59.el6                      beaker-Server                  833 k
 httpd-tools                    x86_64                  2.2.15-59.el6                      beaker-Server                   79 k

Transaction Summary
================================================================================================================================
Install       4 Package(s)

Total download size: 1.0 M
Installed size: 3.4 M
Downloading Packages:
(1/4): apr-util-ldap-1.3.9-3.el6_0.1.x86_64.rpm                                                          |  15 kB     00:00
(2/4): httpd-2.2.15-59.el6.x86_64.rpm                                                                    | 833 kB     00:00
(3/4): httpd-tools-2.2.15-59.el6.x86_64.rpm                                                              |  79 kB     00:00
(4/4): mod_nss-1.0.10-9.el6.x86_64.rpm                                                                   |  96 kB     00:00
--------------------------------------------------------------------------------------------------------------------------------
Total                                                                                            23 MB/s | 1.0 MB     00:00
Running rpm_check_debug
Running Transaction Test
Transaction Test Succeeded
Running Transaction
  Installing : apr-util-ldap-1.3.9-3.el6_0.1.x86_64                                                                         1/4
  Installing : httpd-tools-2.2.15-59.el6.x86_64                                                                             2/4
  Installing : httpd-2.2.15-59.el6.x86_64                                                                                   3/4
  Installing : mod_nss-1.0.10-9.el6.x86_64                                                                                  4/4
  Verifying  : mod_nss-1.0.10-9.el6.x86_64                                                                                  1/4
  Verifying  : httpd-tools-2.2.15-59.el6.x86_64                                                                             2/4
  Verifying  : httpd-2.2.15-59.el6.x86_64                                                                                   3/4
  Verifying  : apr-util-ldap-1.3.9-3.el6_0.1.x86_64                                                                         4/4

Installed:
  mod_nss.x86_64 0:1.0.10-9.el6

Dependency Installed:
  apr-util-ldap.x86_64 0:1.3.9-3.el6_0.1         httpd.x86_64 0:2.2.15-59.el6         httpd-tools.x86_64 0:2.2.15-59.el6

Complete!&lt;/pre&gt;

&lt;h2&gt;Remove pre-installed certificates from httpd's NSSdb&lt;/h2&gt;
&lt;p&gt;We need to remove pre-installed certificates (provided by httpd installation)&lt;/p&gt;
&lt;pre&gt;[root@tiger ~]# certutil -D -d /etc/httpd/alias/ -n cacert
[root@tiger ~]# for i in beta alpha Server-Cert cacert
&gt; do
&gt; certutil -D -d /etc/httpd/alias/ -n $i
&gt; done
[root@tiger ~]# certutil -L -d /etc/httpd/alias/

Certificate Nickname                                         Trust Attributes
                                                             SSL,S/MIME,JAR/XPI

&lt;/pre&gt;

&lt;h2&gt;Import CA certificate and Server certificate on httpd server&lt;/h2&gt;
&lt;p&gt;Import previously created CA certificate and server certificate in httpd's NSSdb&lt;/p&gt;
&lt;p&gt;First export CA certificate and server certificate from &lt;code&gt;cybertron&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;[root@cybertron ~]# ipa cert-show 12 --out=server1.crt
[root@cybertron ~]# ipa cert-show 11 --out=testuser1.crt
[root@cybertron ~]# openssl pkcs12 -in cacert.p12 -clcerts -nokeys -out cacert.crt
Enter Import Password:
MAC verified OK&lt;/pre&gt;

&lt;p&gt;Now, import these certificates on httpd server i.e., &lt;code&gt;tiger&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;[root@tiger alias]# pwd
/etc/httpd/alias
[root@tiger alias]# pk12util -i server1.p12 -d .
Enter password for PKCS12 file:
pk12util: no nickname for cert in PKCS12 file.
pk12util: using nickname: tiger.testrelm.test - TESTRELM.TEST
pk12util: PKCS12 IMPORT SUCCESSFUL
[root@tiger alias]# pk12util -i cacert.p12 -d .
Enter password for PKCS12 file:
pk12util: PKCS12 IMPORT SUCCESSFUL
[root@tiger alias]# certutil -L -d .

Certificate Nickname                                         Trust Attributes
                                                             SSL,S/MIME,JAR/XPI

tiger.testrelm.test - TESTRELM.TEST                         u,u,u
ocspSigningCert cert-pki-ca                                  u,u,u
subsystemCert cert-pki-ca                                    u,u,u
Certificate Authority - TESTRELM.TEST                        u,u,u
auditSigningCert cert-pki-ca                                 u,u,u
[root@tiger alias]# certutil -M -d . -t 'CTu,Cu,Cu' -n 'Certificate Authority - TESTRELM.TEST'
[root@tiger alias]# certutil -L -d .

Certificate Nickname                                         Trust Attributes
                                                             SSL,S/MIME,JAR/XPI

tiger.testrelm.test - TESTRELM.TEST                         u,u,u
ocspSigningCert cert-pki-ca                                  u,u,u
subsystemCert cert-pki-ca                                    u,u,u
auditSigningCert cert-pki-ca                                 u,u,u
Certificate Authority - TESTRELM.TEST                        CTu,Cu,Cu&lt;/pre&gt;

&lt;h2&gt;Create a virtualhost for authentication purpose&lt;/h2&gt;
&lt;p&gt;First, create a secure directory for which we want to have authentication&lt;/p&gt;
&lt;pre&gt;[root@tiger ~]# mkdir /var/www/secure
[root@tiger ~]# echo "Hello" &gt; /var/www/secure/index.html&lt;/pre&gt;

&lt;p&gt;Now, create a virtualhost configuration for secure directory by create a file - &lt;code&gt;/etc/httpd/conf.d/secure.conf&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Contents of &lt;code&gt;secure.conf&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;NameVirtualHost 192.168.12.2:8443
LoadModule nss_module modules/libmodnss.so
Listen 8443
&lt; VirtualHost _default_:8443&gt;
    ServerName tiger.testrelm.test
    DocumentRoot /var/www/secure

    NSSEngine on
    NSSCertificateDatabase /etc/httpd/alias
    NSSOCSP on
    NSSOCSPTimeout 10
    NSSOCSPMinCacheEntryDuration 60
    NSSOCSPMaxCacheEntryDuration 80
    NSSRenegotiation on
    NSSPassPhraseDialog  builtin
    NSSPassPhraseHelper /usr/libexec/nss_pcache

    NSSCipherSuite +rsa_3des_sha,+rsa_aes_128_sha,+rsa_aes_256_sha,+ecdh_ecdsa_3des_sha,+ecdh_ecdsa_aes_256_sha,+ecdhe_ecdsa_3des_sha,+ecdhe_ecdsa_aes_256_sha,+ecdh_rsa_3des_sha,+ecdh_rsa_aes_256_sha,+ecdhe_rsa_3des_sha,+ecdhe_rsa_aes_128_sha,+ecdhe_rsa_aes_256_sha

    NSSProtocol TLSv1.0,TLSv1.1

    NSSNickname "tiger.testrelm.test - TESTRELM.TEST"

    NSSVerifyClient require
    LogLevel debug
    NSSRequireSafeNegotiation On
    NSSEnforceValidCerts On
&lt; /VirtualHost&gt;
&lt;/pre&gt;

&lt;p&gt;P.S. remove space from Virtualhost Tags&lt;/p&gt;
&lt;h2&gt;Restart httpd Server&lt;/h2&gt;
&lt;pre&gt;[root@tiger ~]# /etc/init.d/httpd restart
Stopping httpd: [  OK  ]
Starting httpd: [  OK  ]&lt;/pre&gt;

&lt;h2&gt;Test configuration using curl&lt;/h2&gt;
&lt;p&gt;Let us test configuration using &lt;code&gt;curl&lt;/code&gt; command&lt;/p&gt;
&lt;pre&gt;[root@client ~]# curl -vvl https://`hostname`:8443 --cacert /temp/cacert.crt --cert /temp/testuser1.crt --key /temp/testuser1.key
* About to connect() to tiger.testrelm.test port 8443 (#0)
*   Trying 192.168.12.2... connected
* Connected to tiger.testrelm.test (192.168.12.2) port 8443 (#0)
* Initializing NSS with certpath: sql:/etc/pki/nssdb
*   CAfile: /root/temp/cacert.crt
  CApath: none
* NSS: client certificate from file
*   subject: CN=testuser1,O=TESTRELM.TEST
*   start date: Jan 16 11:12:42 2017 GMT
*   expire date: Jan 17 11:12:42 2019 GMT
*   common name: testuser1
*   issuer: CN=Certificate Authority,O=TESTRELM.TEST
* SSL connection using TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA
* Server certificate:
*   subject: CN=tiger.testrelm.test,O=TESTRELM.TEST
*   start date: Jan 16 11:41:06 2017 GMT
*   expire date: Jan 17 11:41:06 2019 GMT
*   common name: tiger.testrelm.test
*   issuer: CN=Certificate Authority,O=TESTRELM.TEST
&gt; GET / HTTP/1.1
&gt; User-Agent: curl/7.19.7 (x86_64-redhat-linux-gnu) libcurl/7.19.7 NSS/3.19.1 Basic ECC zlib/1.2.3 libidn/1.18 libssh2/1.4.2
&gt; Host: tiger.testrelm.test:8443
&gt; Accept: */*
&gt;
&lt; HTTP/1.1 200 OK
&lt; Date: Tue, 17 Jan 2017 08:51:55 GMT
&lt; Server: Apache/2.2.15 (Red Hat)
&lt; Last-Modified: Mon, 16 Jan 2017 12:01:46 GMT
&lt; ETag: "e0351-6-54634f29ce826"
&lt; Accept-Ranges: bytes
&lt; Content-Length: 6
&lt; Connection: close
&lt; Content-Type: text/html; charset=UTF-8
&lt;
Hello
* Closing connection #0&lt;/pre&gt;

&lt;h2&gt;Check if OCSP from IPA server works or Not&lt;/h2&gt;
&lt;p&gt;Stop FreeIPA service on &lt;code&gt;cybertron&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;[root@cybertron ~]# ipactl stop
Stopping ipa-dnskeysyncd Service
Stopping ipa-otpd Service
Stopping ntpd Service
Stopping ipa-custodia Service
Stopping httpd Service
Stopping ipa_memcached Service
Stopping named Service
Stopping kadmin Service
Stopping krb5kdc Service
Stopping Directory Service
ipa: INFO: The ipactl command was successful&lt;/pre&gt;

&lt;p&gt;Now, check client certification authentication using curl command&lt;/p&gt;
&lt;pre&gt;[root@client ~]# curl -vvl https://`hostname`:8443 --cacert /temp/cacert.crt --cert /temp/testuser1.crt --key /temp/testuser1.key
* About to connect() to tiger.testrelm.test port 8443 (#0)
*   Trying 192.168.12.2... connected
* Connected to tiger.testrelm.test (192.168.12.2) port 8443 (#0)
* Initializing NSS with certpath: sql:/etc/pki/nssdb
*   CAfile: /root/temp/cacert.crt
  CApath: none
* NSS: client certificate from file
*   subject: CN=testuser1,O=TESTRELM.TEST
*   start date: Jan 16 11:12:42 2017 GMT
*   expire date: Jan 17 11:12:42 2019 GMT
*   common name: testuser1
*   issuer: CN=Certificate Authority,O=TESTRELM.TEST
* NSS error -12271
* Closing connection #0
* SSL connect error
curl: (35) SSL connect error&lt;/pre&gt;

&lt;p&gt;Check httpd logs on &lt;code&gt;tiger&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;[root@tiger httpd]# tail -f /var/log/httpd/error_log
[Tue Jan 17 04:09:01 2017] [debug] nss_engine_init.c(1948): SNI: Found nickname tiger.testrelm.test - TESTRELM.TEST for vhost: tiger.testrelm.test
[Tue Jan 17 04:09:01 2017] [debug] nss_engine_init.c(1970): SNI: Successfully paired vhost tiger.testrelm.test with nickname: tiger.testrelm.test - TESTRELM.TEST
[Tue Jan 17 04:09:01 2017] [error] Bad remote server certificate: -8071
[Tue Jan 17 04:09:01 2017] [error] SSL Library Error: -8071 The OCSP server experienced an internal error
[Tue Jan 17 04:09:01 2017] [info] SSL input filter read failed.
[Tue Jan 17 04:09:01 2017] [error] SSL Library Error: -8071 The OCSP server experienced an internal error
[Tue Jan 17 04:09:01 2017] [info] Connection to child 3 closed (server tiger.testrelm.test:443, client 192.168.12.2)&lt;/pre&gt;</content><category term="System Administration"></category><category term="OCSP"></category><category term="mod_nss"></category><category term="httpd"></category><category term="CentOS"></category></entry><entry><title>Python - Traceback module</title><link href="https://akasurde.github.io/python-traceback-module.html" rel="alternate"></link><published>2017-01-16T12:03:00+05:30</published><updated>2016-01-16T12:03:00+05:30</updated><author><name>Abhijeet Kasurde</name></author><id>tag:akasurde.github.io,2017-01-16:/python-traceback-module.html</id><summary type="html">&lt;p&gt;Python - Traceback module&lt;/p&gt;</summary><content type="html">&lt;p&gt;How to print current call stack for debugging purpose&lt;/p&gt;
&lt;pre&gt;import traceback
def f():
    g()
def g():
    for line in traceback.format_stack():
        print(line.strip())
f()&lt;/pre&gt;

&lt;p&gt;It gives output as follows : &lt;/p&gt;
&lt;pre&gt;
# Prints:
# File "example_tracestack.py", line 10, in &lt;module&gt;
#     f()
# File "example_tracestack.py", line 4, in f
#     g()
# File "exampel_tracestack.py", line 7, in g
#     for line in traceback.format_stack():&lt;/pre&gt;</content><category term="Python, traceback"></category><category term="Python"></category><category term="Traceback"></category><category term="module"></category></entry><entry><title>The missing manual - mod-nss</title><link href="https://akasurde.github.io/mod-nss-the-missing-manual.html" rel="alternate"></link><published>2017-01-13T12:03:00+05:30</published><updated>2017-01-13T12:03:00+05:30</updated><author><name>Abhijeet Kasurde</name></author><id>tag:akasurde.github.io,2017-01-13:/mod-nss-the-missing-manual.html</id><summary type="html">&lt;p&gt;The missing manual - mod-nss&lt;/p&gt;</summary><content type="html">&lt;h1&gt;mod_nss&lt;/h1&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;The mod_ssl package was created in April 1998 by Ralf S. Engelschall and was originally derived from the Apache-SSL package developed by Ben Laurie. It is licensed under the Apache 2.0 license.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;mod_nss&lt;/strong&gt; is based directly on the mod_ssl package from Apache 2.0.54. It is a conversion from using OpenSSL calls to using NSS calls instead.&lt;/p&gt;
&lt;h2&gt;Building&lt;/h2&gt;
&lt;p&gt;Refer to the README file included with the distribution.&lt;/p&gt;
&lt;p&gt;To build you'll need NSPR 4.4.1 or above and NSS 3.9.2 or above. It may work with earlier versions but these are recommended (or tested). These can be retrieved from &lt;a href="http://www.mozilla.org/"&gt;Mozilla&lt;/a&gt;. The &lt;code&gt;--with-nspr&lt;/code&gt; and &lt;code&gt;--with-nss&lt;/code&gt; options require that the package be installed in the same parent directory (e.g. &lt;code&gt;/opt/nspr&lt;/code&gt;, &lt;code&gt;/usr/local/nspr&lt;/code&gt;, etc). It will look in this parent for include/ and lib/, etc.&lt;/p&gt;
&lt;p&gt;To build with ECC support you need NSPR 4.6.2 or higher and NSS 3.11.2 or higher.&lt;/p&gt;
&lt;p&gt;You will also need the NSS and NSPR directories in your library search path (either /etc/ld.so.conf or LD_LIBRARY_PATH) to link and run the module.&lt;/p&gt;
&lt;p&gt;Run the configure script. The following mod_nss-specific options are available:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Option&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;--with-nss=[PATH]&lt;/td&gt;
&lt;td&gt;The file system path to the NSS installation. The assumption is that this has the layout of: PATH/lib, PATH/include, etc.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;--with-nss-inc=PATH&lt;/td&gt;
&lt;td&gt;The file system path to the NSS include directory (e.g. /usr/local/include/nss3)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;--with-nss-lib=PATH&lt;/td&gt;
&lt;td&gt;The file system path to the NSS lib directory (e.g. /usr/local/lib)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;--with-nspr=[PATH]&lt;/td&gt;
&lt;td&gt;The file system path of the NSPR installation. The assumption is that this has the layout of: PATH/lib, PATH/include, etc.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;--with-nspr-inc=PATH&lt;/td&gt;
&lt;td&gt;The file system path to the NSPR include directory (e.g. /usr/local/include/nspr4)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;--with-nspr-lib=PATH&lt;/td&gt;
&lt;td&gt;The file system path to the NSPR lib directory (e.g. /usr/local/lib)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;--with-apxs=[PATH]&lt;/td&gt;
&lt;td&gt;The location of the apxs binary of the Apache you want to install the module into.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;--with-apr-config=[PATH]&lt;/td&gt;
&lt;td&gt;The location of apr-config which tells us where the APR include files and libraries are located&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;--enable-ecc&lt;/td&gt;
&lt;td&gt;Enable Elliptical Curve Cryptography. Disabled by default.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;If &lt;code&gt;--with-nss&lt;/code&gt; or &lt;code&gt;--with-nspr&lt;/code&gt; are not passed configure will look for the &lt;code&gt;[nss|nspr]-devel&lt;/code&gt; packages and use the libraries with that if found.&lt;/p&gt;
&lt;p&gt;It is strongly recommended that the mozilla.org version be used.&lt;/p&gt;
&lt;p&gt;Build and install those packages somewhere then configure the module with something like:&lt;/p&gt;
&lt;pre&gt;
  % ./configure --with-apxs=/path/to/apxs/ --with-nspr=/path/to/nspr/ --with-nss=/path/to/nss/
  % gmake&lt;/pre&gt;

&lt;p&gt;This will create a sample configuration file nss.conf. By default this is installed during the installation process.&lt;/p&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;p&gt;The make install target uses apxs to install the module into Apache.&lt;/p&gt;
&lt;p&gt;This automatically copies the mod_nss shared library to the appropriate location and updates Apache's httpd.conf so that the module will be loaded during the next restart.&lt;/p&gt;
&lt;p&gt;It also tries to rename ssl.conf to ssl.conf.old.&lt;/p&gt;
&lt;p&gt;The assumption is that mod_nss is replacing mod_ssl. They can co-exist as long as they are listening on separate ports.&lt;/p&gt;
&lt;p&gt;The mod_nss configuration file, nss.conf, is copied into the Apache configuration directory (as reported by apxs). You may need to make a manual change to httpd.conf to load this file. If you have a Red Hat-style Apache installation with a conf.d just move &lt;code&gt;nss.conf&lt;/code&gt; there. It will be automatically loaded. Otherwise you will need to add the following line to &lt;code&gt;httpd.conf&lt;/code&gt; (location relative to &lt;code&gt;httpd.conf&lt;/code&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;Include&lt;/span&gt; &lt;span class="nv"&gt;conf&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;nss&lt;/span&gt;.&lt;span class="nv"&gt;conf&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This has Apache load the &lt;code&gt;mod_nss&lt;/code&gt; configuration file, &lt;code&gt;nss.conf&lt;/code&gt;. It is here that you will setup your VirtualServer entries to and configure your SSL servers. If you have a certificate with Subject Alternative Names then you can configure separate VirtualServer entries for eacon one.
Certificate Generation&lt;/p&gt;
&lt;p&gt;A ksh script, &lt;code&gt;gencert&lt;/code&gt;, is included to automatically generate a self-signed CA plus one server certificate. This is fine for testing purposes but it is strongly recommended that a real server certificate be obtained from a real CA before moving a &lt;code&gt;mod_nss&lt;/code&gt; server into production. Users should be expected to cancel any request to a secure server signed by an unknown issuer.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;gencert&lt;/code&gt; takes one argument, the path to the location of the certificate database. A fair amount of output is generated so you can follow what is going on. For the most part most don't need to bother with the details.&lt;/p&gt;
&lt;p&gt;The certificate database password is httptest.&lt;/p&gt;
&lt;p&gt;A sample run is:&lt;/p&gt;
&lt;pre&gt;
  # mkdir /etc/httpd/nss
  # ./gencert /etc/httpd/nss

  #####################################################################
  Generating new server certificate and key database. The password
  is httptest
  #####################################################################

  #####################################################################
  Generating self-signed client CA certificate
  #####################################################################

  Generating key.  This may take a few moments...

  [ Lots of output removed ]
&lt;/pre&gt;

&lt;p&gt;You should now have the following files:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;/etc/httpd/nss/cert8.db&lt;/li&gt;
&lt;li&gt;/etc/httpd/nss/key3.db&lt;/li&gt;
&lt;li&gt;/etc/httpd/nss/secmod.db&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These 3 files make up an NSS certificate database.&lt;/p&gt;
&lt;p&gt;If you have a sql: prefix on the path, like &lt;code&gt;sql:/etc/httpd/nss&lt;/code&gt;, then it will generate an SQLite NSS database consisting of the following files:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;/etc/httpd/nss/cert9.db&lt;/li&gt;
&lt;li&gt;/etc/httpd/nss/key4.db&lt;/li&gt;
&lt;li&gt;/etc/httpd/nss/pkcs11.txt&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Server Startup&lt;/h2&gt;
&lt;p&gt;Starting a &lt;code&gt;mod_nss&lt;/code&gt; server is no different than starting a &lt;code&gt;mod_ssl&lt;/code&gt; server. You will need to authenticate yourself to the security token (e.g. enter the key password). The sample &lt;code&gt;nss.conf&lt;/code&gt; is not included in an &lt;IfDefine SSL&gt; so you do not need to use the startssl argument with apachectl.&lt;/p&gt;
&lt;p&gt;A sample startup might look like:&lt;/p&gt;
&lt;pre&gt; % apachectl start
  Please enter password for "internal" token:
  &lt;/pre&gt;

&lt;p&gt;If you have additional hardware tokens you will be prompted for each token password.&lt;/p&gt;
&lt;p&gt;All other output will be written to the Apache log files.&lt;/p&gt;
&lt;p&gt;To avoid being prompted for a startup password you can either:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Use a password file that contains your token passwords. See NSSPassPhraseDialog for details.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Exec a program which provides the token password (either by asking the user or other means. Change the internal token password to a blank with:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt; % modutil -dbdir /path/to/database/directory -changepw "NSS Certificate DB" &lt;/pre&gt;

&lt;p&gt;Enter the old password then press Enter twice for the new password to blank it out.&lt;/p&gt;
&lt;h2&gt;Migration&lt;/h2&gt;
&lt;p&gt;A perl script, &lt;code&gt;migrate.pl&lt;/code&gt;, is included to help migrate an existing &lt;code&gt;mod_ssl&lt;/code&gt; configuration to work with &lt;code&gt;mod_nss&lt;/code&gt;. There is one optional argument, &lt;code&gt;-c&lt;/code&gt;, that will try to convert your existing server and CA certificates plus any certificate revocation lists (CRLs) into an NSS certificate database.&lt;/p&gt;
&lt;p&gt;The migration script assumes that you are migrating from &lt;code&gt;ssl.conf&lt;/code&gt; to &lt;code&gt;nss.conf&lt;/code&gt;. The original file is not changed. All comments, spacing and other directives are maintained so if there is no ssl.conf it is possible to migrate &lt;code&gt;httpd.conf&lt;/code&gt; to use &lt;code&gt;mod_nss&lt;/code&gt;. Simply copy &lt;code&gt;httpd.conf&lt;/code&gt; to &lt;code&gt;ssl.conf&lt;/code&gt;, run the update, then copy &lt;code&gt;nss.conf&lt;/code&gt; to &lt;code&gt;httpd.conf&lt;/code&gt; (after making a backup, of course). This multi-step process gives you a chance to verify that the migration was successful.&lt;/p&gt;
&lt;h2&gt;Configuration Directives&lt;/h2&gt;
&lt;p&gt;The following mod_ssl Directives are not applicable to mod_nss:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SSLSessionCache&lt;/li&gt;
&lt;li&gt;SSLMutex&lt;/li&gt;
&lt;li&gt;SSLCertificateChainFile&lt;/li&gt;
&lt;li&gt;SSLCARevocationPath&lt;/li&gt;
&lt;li&gt;SSLCARevocationFile&lt;/li&gt;
&lt;li&gt;SSLVerifyDepth&lt;/li&gt;
&lt;li&gt;SSLCryptoDevice&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Details&lt;/h2&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;NSSPassPhraseDialog&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Authentication is required in order to use the private key in an NSS certificate database. The method of this authentication is specified with the NSSPassPhraseDialog directive. This directive takes one argument specifying the method of authentication:
  builtin
  The user will be prompted to enter the token password for each cryptographic device. This works seemlessly with any hardware tokens used. The default "device" is the internal token provided by the NSS Certificate database itself.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;file:/path/to/file&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The token password(s) may be stored in an ASCII text file which is read during startup so the server can start without user intervention. The format of this file is:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;token:password&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;An example for the internal token is:&lt;/p&gt;
&lt;pre&gt;
  internal:secret12
  exec:/path/to/executable&lt;/pre&gt;

&lt;p&gt;The listed program will be executed. The only argument is the NSS token name to be authenticated. The return value of the program is ignored. Only what is printed on stdout is passed along as the password.&lt;/p&gt;
&lt;p&gt;A trivial example script is:&lt;/p&gt;
&lt;pre&gt;
  #!/bin/sh
  echo "secret123"
  &lt;/pre&gt;

&lt;p&gt;To prompt using systemd (as root):&lt;/p&gt;
&lt;pre&gt;
  #!/bin/sh
  exec /bin/systemd-ask-password "Enter SSL pass phrase for $1: "
  &lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Example&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;
  NSSPassPhraseDialog builtin
  NSSPassPhraseDialog file:/etc/httpd/alias/password.conf
  NSSPassPhraseDialog exec:/usr/libexec/httpd/httpd-ssl-pass-dialog&lt;/pre&gt;

&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;NSSPassPhraseHelper&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When Apache starts it loads and unloads any modules that aren't built-in twice. It loads them once so it can verify that the configuration is ok and then it unloads them and re-loads them again when the server is actually ready to receive connections. After the first module load Apache closes access to the terminal so there is no way to prompt for the NSS token passwords (it would also be annoying to have to authenticate twice). Because the module is loaded and unloaded the NSS certificate database needs to be loaded and unloaded as well, causing any pins entered during the first load to be lost and causing the server to be unstartable.&lt;/p&gt;
&lt;p&gt;The solution is the PassPhraseHelper. This is a stand-alone program that also opens the NSS certificate database and stores a copy of the encrypted token password entered during the first load of the NSS module. When mod_nss needs to open the certificate database during subsequent reloads it queries the PassPhraseHelper for the token password.&lt;/p&gt;
&lt;p&gt;Example&lt;/p&gt;
&lt;pre&gt;NSSPassPhraseHelper /path/to/nss_pcache&lt;/pre&gt;

&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;NSSCertificateDatabase&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Specifies the location of the NSS certificate database to be used. An NSS certificate database consists of 3 files: &lt;code&gt;cert8.db&lt;/code&gt;, &lt;code&gt;key3.db&lt;/code&gt; and &lt;code&gt;secmod.db&lt;/code&gt;. &lt;code&gt;cert8.db&lt;/code&gt; stores certificates and Certificate Revocation Lists (CRLs), &lt;code&gt;key3.db&lt;/code&gt; stores keys and &lt;code&gt;secmod.db&lt;/code&gt; stores information about available PKCS#11 modules.&lt;/p&gt;
&lt;p&gt;This directive specifies a path, not a filename. To use a sqlite NSS database include the prefix sql: in the path.&lt;/p&gt;
&lt;p&gt;Example&lt;/p&gt;
&lt;pre&gt;NSSCertificateDatabase /etc/httpd/conf/nss
  NSSCertificateDatabase sql:/etc/httpd/conf/nss&lt;/pre&gt;

&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;NSSDBPrefix&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Normally a certificate database consists of 3 files: &lt;code&gt;cert8.db&lt;/code&gt;, &lt;code&gt;key3.db&lt;/code&gt; and &lt;code&gt;secmod.db&lt;/code&gt;. This directive allows you to add a named prefix to the filenames of &lt;code&gt;cert8.db&lt;/code&gt; and &lt;code&gt;key3.db&lt;/code&gt; so you can store multiple databases in one directory.&lt;/p&gt;
&lt;p&gt;Example&lt;/p&gt;
&lt;pre&gt; NSSDBPrefix my-prefix-&lt;/pre&gt;

&lt;p&gt;You would then need: &lt;code&gt;my-prefix-cert8.db&lt;/code&gt;, &lt;code&gt;my-prefix-key3.db&lt;/code&gt; and &lt;code&gt;secmod.db&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;In order to work with files with a prefix using the NSS command-line tools use the -P flag.&lt;/p&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;NSSSessionCacheSize&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Specifies the number of SSL sessions that can be cached.&lt;/p&gt;
&lt;p&gt;There is no upper limit.&lt;/p&gt;
&lt;p&gt;The default value is 10000.&lt;/p&gt;
&lt;p&gt;Example&lt;/p&gt;
&lt;pre&gt;NSSSessionCacheSize 10000&lt;/pre&gt;

&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;NSSSessionCacheTimeout&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Deprecated.&lt;/p&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;NSSSession3CacheTimeout&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Specifies the number of seconds SSLv3 sessions are cached.&lt;/p&gt;
&lt;p&gt;The valid range is 5 - 86400 seconds. A setting outside the valid range is silently constrained.&lt;/p&gt;
&lt;p&gt;The default value is 86400 (24 hours).&lt;/p&gt;
&lt;p&gt;Example&lt;/p&gt;
&lt;pre&gt;NSSSession3CacheTimeout 86400&lt;/pre&gt;

&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;NSSRandomSeed&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Configures sources to seed the NSS Random Number Generator (RNG) at startup. Currently this only supports seeding the RNG at startup.&lt;/p&gt;
&lt;p&gt;The following sources are available:
  builtin: Combines the current system time, the current process id and a randomly choosen 128-byte extract of the process stack. This is not a particularly strong source of entropy.
  file:/path/to/source: Reads from the specified file. If the number of bytes to read is specified it just reads that amount. Be aware that some operating systems block on /dev/random if not enough entropy is available. This means that the server will wait until that data is available to continue startup. These systems generally offer a non-blocking device as well, /dev/urandom.
  exec:/path/to/program: Executes the given program and takes the stdout of it as the entropy. If the bytes argument is included it reads that many bytes, otherwise it reads until the program exits.&lt;/p&gt;
&lt;p&gt;Example&lt;/p&gt;
&lt;pre&gt;NSSRandomSeed startup builtin
  NSSRandomSeed startup /dev/urandom 512
  NSSRandomSeed startup /usr/bin/makerandom&lt;/pre&gt;

&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;NSSSkipPermissionCheck&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The NSS database will be checked to ensure that the user configured to run Apache as has owner or group read access to the database configured in NSSCertificateDatabase. This check can be disabled by setting NSSSkipPermissionCheck to on. The default is off&lt;/p&gt;
&lt;p&gt;Example&lt;/p&gt;
&lt;pre&gt;NSSSkipPermissionCheck on&lt;/pre&gt;

&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;NSSEngine&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Enables or disables the SSL protocol. This is usually used within a VirtualHost tag to enable SSL for a particular virtual host.&lt;/p&gt;
&lt;p&gt;SSL is disabled by default.&lt;/p&gt;
&lt;p&gt;Example&lt;/p&gt;
&lt;pre&gt;NSSEngine on&lt;/pre&gt;

&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;NSSFIPS&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Enables or disables FIPS 140 mode. This replaces the standard internal PKCS#11 module with a FIPS-enabled one. It also forces the enabled protocols to TLSv1.2, TLSv1.1 and TLSv1.0 and disables all ciphers but the FIPS ones. You may still select which ciphers you would like limited to those that are FIPS-certified. Any non-FIPS that are included in the NSSCipherSuite entry are automatically disabled. The allowable ciphers are (with ecc-enabled set):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;rsa_3des_sha&lt;/li&gt;
&lt;li&gt;rsa_aes_128_sha&lt;/li&gt;
&lt;li&gt;rsa_aes_256_sha&lt;/li&gt;
&lt;li&gt;aes_128_sha_256&lt;/li&gt;
&lt;li&gt;aes_256_sha_256&lt;/li&gt;
&lt;li&gt;rsa_aes_128_gcm_sha_256&lt;/li&gt;
&lt;li&gt;fips_3des_sha&lt;/li&gt;
&lt;li&gt;ecdh_ecdsa_3des_sha&lt;/li&gt;
&lt;li&gt;ecdh_ecdsa_aes_128_sha&lt;/li&gt;
&lt;li&gt;ecdh_ecdsa_aes_256_sha&lt;/li&gt;
&lt;li&gt;ecdhe_ecdsa_3des_sha&lt;/li&gt;
&lt;li&gt;ecdhe_ecdsa_aes_128_sha&lt;/li&gt;
&lt;li&gt;ecdhe_ecdsa_aes_256_sha&lt;/li&gt;
&lt;li&gt;ecdh_rsa_3des_sha&lt;/li&gt;
&lt;li&gt;ecdh_rsa_aes_128_sha&lt;/li&gt;
&lt;li&gt;ecdh_rsa_aes_256_sha&lt;/li&gt;
&lt;li&gt;ecdhe_rsa_3des_sha&lt;/li&gt;
&lt;li&gt;ecdhe_rsa_aes_128_sha&lt;/li&gt;
&lt;li&gt;ecdhe_rsa_aes_256_sha&lt;/li&gt;
&lt;li&gt;ecdhe_ecdsa_aes_128_sha_256&lt;/li&gt;
&lt;li&gt;ecdhe_rsa_aes_128_sha_256&lt;/li&gt;
&lt;li&gt;ecdhe_ecdsa_aes_128_gcm_sha_256&lt;/li&gt;
&lt;li&gt;ecdhe_rsa_aes_128_gcm_sha_256&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;FIPS is disabled by default.&lt;/p&gt;
&lt;p&gt;Example&lt;/p&gt;
&lt;pre&gt;NSSFIPS on&lt;/pre&gt;

&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;NSSOCSP&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Enables or disables OCSP (Online Certificate Status Protocol). This allows the server to check the validity of a client certificate before accepting it.&lt;/p&gt;
&lt;p&gt;OCSP is disabled by default.&lt;/p&gt;
&lt;p&gt;Example&lt;/p&gt;
&lt;pre&gt;NSSOCSP on&lt;/pre&gt;

&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;NSSCipherSuite&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are two options for configuring the available ciphers. mod_nss provides its own cipher list, a space-separated list of the SSL ciphers used, with the prefix + to enable or - to disable, using the Cipher Name value in the tables below.&lt;/p&gt;
&lt;p&gt;Alternatively the mod_nss-style cipher definitions may be used, &lt;a href="http://httpd.apache.org/docs/2.4/mod/mod_ssl.html#sslciphersuite"&gt;sslciphersuite&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The support options are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ALL&lt;/li&gt;
&lt;li&gt;COMPLEMENTOFALL&lt;/li&gt;
&lt;li&gt;DEFAULT&lt;/li&gt;
&lt;li&gt;RSA&lt;/li&gt;
&lt;li&gt;EDH&lt;/li&gt;
&lt;li&gt;NULL&lt;/li&gt;
&lt;li&gt;eNULL&lt;/li&gt;
&lt;li&gt;AES&lt;/li&gt;
&lt;li&gt;3DES&lt;/li&gt;
&lt;li&gt;DES&lt;/li&gt;
&lt;li&gt;RC4,&lt;/li&gt;
&lt;li&gt;MD5&lt;/li&gt;
&lt;li&gt;SHA&lt;/li&gt;
&lt;li&gt;SHA1&lt;/li&gt;
&lt;li&gt;SHA256&lt;/li&gt;
&lt;li&gt;SSLv3&lt;/li&gt;
&lt;li&gt;TLSv1&lt;/li&gt;
&lt;li&gt;TLSv12&lt;/li&gt;
&lt;li&gt;HIGH&lt;/li&gt;
&lt;li&gt;MEDIUM&lt;/li&gt;
&lt;li&gt;LOW&lt;/li&gt;
&lt;li&gt;EXPORT&lt;/li&gt;
&lt;li&gt;EXPORT40&lt;/li&gt;
&lt;li&gt;EXPORT56&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If a cipher string value contains a colon it is considered a mod_ssl-style cipher string.&lt;/p&gt;
&lt;p&gt;If a cipher string value contains a comma it is considered a mod_nss-style cipher string.&lt;/p&gt;
&lt;p&gt;If it contains neither then mod_nss first tries to apply OpenSSL ciphers then NSS ciphers.&lt;/p&gt;
&lt;p&gt;All ciphers are disabled by default.&lt;/p&gt;
&lt;p&gt;Available RSA ciphers are:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Cipher Name&lt;/th&gt;
&lt;th&gt;NSS Cipher definition&lt;/th&gt;
&lt;th&gt;Protocol&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;rsa_3des_sha&lt;/td&gt;
&lt;td&gt;TLS_RSA_WITH_3DES_EDE_CBC_SHA&lt;/td&gt;
&lt;td&gt;SSLv3/TLSv1.0/TLSv1.1/TLSv1.2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;rsa_des_sha&lt;/td&gt;
&lt;td&gt;TLS_RSA_WITH_DES_CBC_SHA&lt;/td&gt;
&lt;td&gt;SSLv3/TLSv1.0/TLSv1.1/TLSv1.2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;rsa_null_md5&lt;/td&gt;
&lt;td&gt;TLS_RSA_WITH_NULL_MD5&lt;/td&gt;
&lt;td&gt;SSLv3/TLSv1.0/TLSv1.1/TLSv1.2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;rsa_null_sha&lt;/td&gt;
&lt;td&gt;TLS_RSA_WITH_NULL_SHA&lt;/td&gt;
&lt;td&gt;SSLv3/TLSv1.0/TLSv1.1/TLSv1.2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;rsa_rc2_40_md5&lt;/td&gt;
&lt;td&gt;TLS_RSA_EXPORT_WITH_RC2_CBC_40_MD5&lt;/td&gt;
&lt;td&gt;SSLv3/TLSv1.0/TLSv1.1/TLSv1.2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;rsa_rc4_128_md5&lt;/td&gt;
&lt;td&gt;TLS_RSA_WITH_RC4_128_MD5&lt;/td&gt;
&lt;td&gt;SSLv3/TLSv1.0/TLSv1.1/TLSv1.2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;rsa_rc4_128_sha&lt;/td&gt;
&lt;td&gt;TLS_RSA_WITH_RC4_128_SHA&lt;/td&gt;
&lt;td&gt;SSLv3/TLSv1.0/TLSv1.1/TLSv1.2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;rsa_rc4_40_md5&lt;/td&gt;
&lt;td&gt;TLS_RSA_EXPORT_WITH_RC4_40_MD5&lt;/td&gt;
&lt;td&gt;SSLv3/TLSv1.0/TLSv1.1/TLSv1.2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;fips_des_sha&lt;/td&gt;
&lt;td&gt;SSL_RSA_FIPS_WITH_DES_CBC_SHA&lt;/td&gt;
&lt;td&gt;SSLv3/TLSv1.0/TLSv1.1/TLSv1.2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;fips_3des_sha&lt;/td&gt;
&lt;td&gt;SSL_RSA_FIPS_WITH_3DES_EDE_CBC_SHA&lt;/td&gt;
&lt;td&gt;SSLv3/TLSv1.0/TLSv1.1/TLSv1.2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;rsa_des_56_sha&lt;/td&gt;
&lt;td&gt;TLS_RSA_EXPORT1024_WITH_DES_CBC_SHA&lt;/td&gt;
&lt;td&gt;SSLv3/TLSv1.0/TLSv1.1/TLSv1.2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;rsa_rc4_56_sha&lt;/td&gt;
&lt;td&gt;TLS_RSA_EXPORT1024_WITH_RC4_56_SHA&lt;/td&gt;
&lt;td&gt;SSLv3/TLSv1.0/TLSv1.1/TLSv1.2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;rsa_aes_128_sha&lt;/td&gt;
&lt;td&gt;TLS_RSA_WITH_AES_128_CBC_SHA&lt;/td&gt;
&lt;td&gt;SSLv3/TLSv1.0/TLSv1.1/TLSv1.2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;rsa_aes_256_sha&lt;/td&gt;
&lt;td&gt;TLS_RSA_WITH_AES_256_CBC_SHA&lt;/td&gt;
&lt;td&gt;SSLv3/TLSv1.0/TLSv1.1/TLSv1.2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;camelia_128_sha&lt;/td&gt;
&lt;td&gt;TLS_RSA_WITH_CAMELLIA_128_CBC_SHA&lt;/td&gt;
&lt;td&gt;SSLv3/TLSv1.0/TLSv1.1/TLSv1.2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;camelia_256_sha&lt;/td&gt;
&lt;td&gt;TLS_RSA_WITH_CAMELLIA_256_CBC_SHA&lt;/td&gt;
&lt;td&gt;SSLv3/TLSv1.0/TLSv1.1/TLSv1.2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;null_sha_256&lt;/td&gt;
&lt;td&gt;TLS_RSA_WITH_NULL_SHA256&lt;/td&gt;
&lt;td&gt;TLSv1.2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;aes_128_sha_256&lt;/td&gt;
&lt;td&gt;TLS_RSA_WITH_AES_128_CBC_SHA256&lt;/td&gt;
&lt;td&gt;TLSv1.2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;aes_256_sha_256&lt;/td&gt;
&lt;td&gt;TLS_RSA_WITH_AES_256_CBC_SHA256&lt;/td&gt;
&lt;td&gt;TLSv1.2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;rsa_aes_128_gcm_sha_256&lt;/td&gt;
&lt;td&gt;TLS_RSA_WITH_AES_128_GCM_SHA256&lt;/td&gt;
&lt;td&gt;TLSv1.2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The available server-side DHE ciphers are:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Cipher Name&lt;/th&gt;
&lt;th&gt;NSS Cipher definition&lt;/th&gt;
&lt;th&gt;Protocol&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;dhe_rsa_des_sha&lt;/td&gt;
&lt;td&gt;TLS_DHE_RSA_WITH_DES_CBC_SHA&lt;/td&gt;
&lt;td&gt;SSLv3/TLSv1.0/TLSv1.1/TLSv1.2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;dhe_rsa_3des_sha&lt;/td&gt;
&lt;td&gt;TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA&lt;/td&gt;
&lt;td&gt;TLSv1.0/TLSv1.1/TLSv1.2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;dhe_rsa_aes_128_sha&lt;/td&gt;
&lt;td&gt;TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA&lt;/td&gt;
&lt;td&gt;TLSv1.0/TLSv1.1/TLSv1.2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;dhe_rsa_aes_256_sha&lt;/td&gt;
&lt;td&gt;TLS_DHE_RSA_WITH_AES_256_CBC_SHA&lt;/td&gt;
&lt;td&gt;TLSv1.0/TLSv1.1/TLSv1.2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;dhe_rsa_camellia_128_sha&lt;/td&gt;
&lt;td&gt;TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA&lt;/td&gt;
&lt;td&gt;TLSv1.0/TLSv1.1/TLSv1.2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;dhe_rsa_camellia_256_sha&lt;/td&gt;
&lt;td&gt;TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA&lt;/td&gt;
&lt;td&gt;TLSv1.0/TLSv1.1/TLSv1.2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;dhe_rsa_aes_128_sha256&lt;/td&gt;
&lt;td&gt;TLS_DHE_RSA_WITH_AES_128_CBC_SHA256&lt;/td&gt;
&lt;td&gt;TLSv1.2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;dhe_rsa_aes_256_sha256&lt;/td&gt;
&lt;td&gt;TLS_DHE_RSA_WITH_AES_256_CBC_SHA256&lt;/td&gt;
&lt;td&gt;TLSv1.2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;dhe_rsa_aes_128_gcm_sha_256&lt;/td&gt;
&lt;td&gt;TLS_DHE_RSA_WITH_AES_128_GCM_SHA256&lt;/td&gt;
&lt;td&gt;TLSv1.2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Additionally there are a number of ECC ciphers:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Cipher Name&lt;/th&gt;
&lt;th&gt;NSS Cipher definition&lt;/th&gt;
&lt;th&gt;Protocol&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ecdh_ecdsa_null_sha&lt;/td&gt;
&lt;td&gt;TLS_ECDH_ECDSA_WITH_NULL_SHA&lt;/td&gt;
&lt;td&gt;TLSv1.0/TLSv1.1/TLSv1.2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ecdh_ecdsa_rc4_128_sha&lt;/td&gt;
&lt;td&gt;TLS_ECDH_ECDSA_WITH_RC4_128_SHA&lt;/td&gt;
&lt;td&gt;TLSv1.0/TLSv1.1/TLSv1.2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ecdh_ecdsa_3des_sha&lt;/td&gt;
&lt;td&gt;TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA&lt;/td&gt;
&lt;td&gt;TLSv1.0/TLSv1.1/TLSv1.2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ecdh_ecdsa_aes_128_sha&lt;/td&gt;
&lt;td&gt;TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA&lt;/td&gt;
&lt;td&gt;TLSv1.0/TLSv1.1/TLSv1.2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ecdh_ecdsa_aes_256_sha&lt;/td&gt;
&lt;td&gt;TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA&lt;/td&gt;
&lt;td&gt;TLSv1.0/TLSv1.1/TLSv1.2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ecdhe_ecdsa_null_sha&lt;/td&gt;
&lt;td&gt;TLS_ECDHE_ECDSA_WITH_NULL_SHA&lt;/td&gt;
&lt;td&gt;TLSv1.0/TLSv1.1/TLSv1.2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ecdhe_ecdsa_rc4_128_sha&lt;/td&gt;
&lt;td&gt;TLS_ECDHE_ECDSA_WITH_RC4_128_SHA&lt;/td&gt;
&lt;td&gt;TLSv1.0/TLSv1.1/TLSv1.2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ecdhe_ecdsa_3des_sha&lt;/td&gt;
&lt;td&gt;TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA&lt;/td&gt;
&lt;td&gt;TLSv1.0/TLSv1.1/TLSv1.2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ecdhe_ecdsa_aes_128_sha&lt;/td&gt;
&lt;td&gt;TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA&lt;/td&gt;
&lt;td&gt;TLSv1.0/TLSv1.1/TLSv1.2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ecdhe_ecdsa_aes_256_sha&lt;/td&gt;
&lt;td&gt;TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA&lt;/td&gt;
&lt;td&gt;TLSv1.0/TLSv1.1/TLSv1.2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ecdh_rsa_null_sha&lt;/td&gt;
&lt;td&gt;TLS_ECDH_RSA_WITH_NULL_SHA&lt;/td&gt;
&lt;td&gt;TLSv1.0/TLSv1.1/TLSv1.2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ecdh_rsa_128_sha&lt;/td&gt;
&lt;td&gt;TLS_ECDH_RSA_WITH_RC4_128_SHA&lt;/td&gt;
&lt;td&gt;TLSv1.0/TLSv1.1/TLSv1.2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ecdh_rsa_3des_sha&lt;/td&gt;
&lt;td&gt;TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA&lt;/td&gt;
&lt;td&gt;TLSv1.0/TLSv1.1/TLSv1.2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ecdh_rsa_aes_128_sha&lt;/td&gt;
&lt;td&gt;TLS_ECDH_RSA_WITH_AES_128_CBC_SHA&lt;/td&gt;
&lt;td&gt;TLSv1.0/TLSv1.1/TLSv1.2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ecdh_rsa_aes_256_sha&lt;/td&gt;
&lt;td&gt;TLS_ECDH_RSA_WITH_AES_256_CBC_SHA&lt;/td&gt;
&lt;td&gt;TLSv1.0/TLSv1.1/TLSv1.2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;echde_rsa_null&lt;/td&gt;
&lt;td&gt;TLS_ECDHE_RSA_WITH_NULL_SHA&lt;/td&gt;
&lt;td&gt;TLSv1.0/TLSv1.1/TLSv1.2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ecdhe_rsa_rc4_128_sha&lt;/td&gt;
&lt;td&gt;TLS_ECDHE_RSA_WITH_RC4_128_SHA&lt;/td&gt;
&lt;td&gt;TLSv1.0/TLSv1.1/TLSv1.2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ecdhe_rsa_3des_sha&lt;/td&gt;
&lt;td&gt;TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA&lt;/td&gt;
&lt;td&gt;TLSv1.0/TLSv1.1/TLSv1.2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ecdhe_rsa_aes_128_sha&lt;/td&gt;
&lt;td&gt;TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA&lt;/td&gt;
&lt;td&gt;TLSv1.0/TLSv1.1/TLSv1.2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ecdhe_rsa_aes_256_sha&lt;/td&gt;
&lt;td&gt;TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA&lt;/td&gt;
&lt;td&gt;TLSv1.0/TLSv1.1/TLSv1.2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ecdh_anon_null_sha&lt;/td&gt;
&lt;td&gt;TLS_ECDH_anon_WITH_NULL_SHA&lt;/td&gt;
&lt;td&gt;TLSv1.0/TLSv1.1/TLSv1.2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ecdh_anon_rc4_128sha&lt;/td&gt;
&lt;td&gt;TLS_ECDH_anon_WITH_RC4_128_SHA&lt;/td&gt;
&lt;td&gt;TLSv1.0/TLSv1.1/TLSv1.2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ecdh_anon_3des_sha&lt;/td&gt;
&lt;td&gt;TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA&lt;/td&gt;
&lt;td&gt;TLSv1.0/TLSv1.1/TLSv1.2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ecdh_anon_aes_128_sha&lt;/td&gt;
&lt;td&gt;TLS_ECDH_anon_WITH_AES_128_CBC_SHA&lt;/td&gt;
&lt;td&gt;TLSv1.0/TLSv1.1/TLSv1.2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ecdh_anon_aes_256_sha&lt;/td&gt;
&lt;td&gt;TLS_ECDH_anon_WITH_AES_256_CBC_SHA&lt;/td&gt;
&lt;td&gt;TLSv1.0/TLSv1.1/TLSv1.2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ecdhe_ecdsa_aes_128_sha_256&lt;/td&gt;
&lt;td&gt;TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256&lt;/td&gt;
&lt;td&gt;TLSv1.2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ecdhe_rsa_aes_128_sha_256&lt;/td&gt;
&lt;td&gt;TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256&lt;/td&gt;
&lt;td&gt;TLSv1.2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ecdhe_ecdsa_aes_128_gcm_sha_256&lt;/td&gt;
&lt;td&gt;TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256&lt;/td&gt;
&lt;td&gt;TLSv1.2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ecdhe_rsa_aes_128_gcm_sha_256&lt;/td&gt;
&lt;td&gt;TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256&lt;/td&gt;
&lt;td&gt;TLSv1.2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Example&lt;/p&gt;
&lt;pre&gt;NSSCipherSuite +rsa_3des_sha,-rsa_des_56_sha,+rsa_des_sha,-rsa_null_md5,-rsa_null_sha,-rsa_rc2_40_md5,+rsa_rc4_128_md5,-rsa_rc4_128_sha,-rsa_rc4_40_md5,-rsa_rc4_56_sha,-fips_des_sha, +fips_3des_sha,-rsa_aes_128_sha,-rsa_aes_256_sha
NSSCipherSuite ALL
NSSCipherSuite rsa_3des_sha
NSSCipherSuite RC4-SHA&lt;/pre&gt;

&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;NSSProtocol&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A comma-separated string that lists the basic protocols that the server can use (and clients may connect with). It doesn't enable a cipher specifically but allows ciphers for that protocol to be used at all.&lt;/p&gt;
&lt;p&gt;Options are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SSLv3&lt;/li&gt;
&lt;li&gt;TLSv1 (legacy only; replaced by TLSv1.0)&lt;/li&gt;
&lt;li&gt;TLSv1.0&lt;/li&gt;
&lt;li&gt;TLSv1.1&lt;/li&gt;
&lt;li&gt;TLSv1.2&lt;/li&gt;
&lt;li&gt;All&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that this differs from mod_ssl in that you can't add or subtract protocols.&lt;/p&gt;
&lt;p&gt;If no NSSProtocol is specified, mod_nss will default to allowing the use of the TLSv1.0, TLSv1.1 and TLSv1.2 protocols, where TLSv1.0 will be set to be the minimum protocol allowed, and TLSv1.2 will be set to be the maximum protocol allowed.
  If values for NSSProtocol are specified, mod_nss will set both the minimum and the maximum allowed protocols based upon these entries allowing for the inclusion of every protocol in-between. For example, if only SSLv3 and TLSv1.1 are specified, SSLv3, TLSv1.0, and TLSv1.1 will all be allowed, as NSS utilizes protocol ranges to accept all protocols inclusively (TLSv1.1 -&amp;gt; TLSv1.0 -&amp;gt; SSLv3.0), and does not allow exclusion of any protocols in the middle of a range (e. g. - TLSv1.0).&lt;/p&gt;
&lt;p&gt;Finally, NSS will always automatically negotiate the use of the strongest possible protocol that has been specified which is acceptable to both sides of a given connection.
  SSLv2 is not supported by default at this time.&lt;/p&gt;
&lt;p&gt;Example&lt;/p&gt;
&lt;pre&gt;NSSProtocol SSLv3,TLSv1.0,TLSv1.1&lt;/pre&gt;

&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;NSSNickname&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Specify the nickname to be used for this the server certificate. Certificates stored in an NSS database are referred to using nicknames which makes accessing a specific certificate much easier. It is also possible to specify the certificate DN but it is easier to use a nickname. If the nickname includes spaces then the value needs to be enclosed in double quotes.&lt;/p&gt;
&lt;p&gt;Example&lt;/p&gt;
&lt;pre&gt;NSSNickname Server-Cert
NSSNickname "This contains a space"&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: There is nothing magical about the string "Server-Cert." A nickname can be anything. Historically this was Server-Cert in the Netscape server products that used NSS.&lt;/p&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;NSSECCNickname&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Similar to NSSNickname but designed for use with ECC certificates. This allows you to have both an RSA certificate and an ECC certificate available on the same listening port. This allows newer clients that support ECC to connect with those ciphers but also allows older clients to connect with an RSA cipher.&lt;/p&gt;
&lt;p&gt;Example&lt;/p&gt;
&lt;p&gt;NSSNickname Server-Cert-ECC&lt;/p&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;NSSEnforceValidCerts&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;By default mod_nss will not start up if the server certificate is not valid. This means that if the certificate has expired or is signed by a CA that is not trusted in the NSS certificate database the server will not start. If you would like the server to start anyway you can add this directive to nss.conf and the server will start with just a warning. Not enforcing a valid server certificate is not recommended.&lt;/p&gt;
&lt;p&gt;Example&lt;/p&gt;
&lt;pre&gt;NSSEnforceValidCerts on&lt;/pre&gt;

&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;NSSVerifyClient&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Determines whether Client Certificate Authentication will be requested or required. This may be set in a per-server or per-directory context. At the server level the certificate is requested during the initial SSL handshake. In the per-directry context an SSL renogitation is required and a certificate requested from the client.&lt;/p&gt;
&lt;p&gt;Available options are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;none: no client certificate is required or requested&lt;/li&gt;
&lt;li&gt;optional: a client certificate is requested but if one is not available, the connection may continue.&lt;/li&gt;
&lt;li&gt;require: a valid client certificate is required for the connection to continue.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The mod_ssl option option_no_ca is not supported.&lt;/p&gt;
&lt;p&gt;There is no NSSVerifyDepth directive. NSS always verifies the entire certificate chain.&lt;/p&gt;
&lt;p&gt;Example&lt;/p&gt;
&lt;pre&gt;NSSVerifyClient require&lt;/pre&gt;

&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;NSSSessionTickets&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Enables or disables support for TLS Session tickets (RFC 5077). The default is off.&lt;/p&gt;
&lt;p&gt;Example&lt;/p&gt;
&lt;pre&gt;NSSSessionTickets on&lt;/pre&gt;

&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;NSSUserName&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Defines the field in the client certificate which will set the user field in the request. The option FakeBasicAuth (see NSSOptions) must also be set for this to work.&lt;/p&gt;
&lt;p&gt;Example&lt;/p&gt;
&lt;pre&gt;NSSUserName SSL_CLIENT_S_DN_UID&lt;/pre&gt;

&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;NSSOptions&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Control various options in a per-server or per-directory context.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;FakeBasicAuth: When this option is enabled and NSSUserName is set then the certificate attribute defined in NSSUserName is used to populate the value of r-&amp;gt;user in the Apache request object. This equates to the environmant variable REMOTE_USER.&lt;/li&gt;
&lt;li&gt;StdEnvVars: A standard set of SSL environment variables is created.
  CompatEnvVars: A no-op. In previous versions of mod_ssl this would set additional environment variables for backwards compatibility with older Apache SSL implementations.&lt;/li&gt;
&lt;li&gt;ExportCertData: Several additional environment variables are created, SSL_CLIENT_CERT, SSL_CLIENT_CERT_CHAIN[0..n] and SSL_SERVER_CERT. This provides additional certificate information on the client and server to the environment, plus every CA certificate in the client certificate.&lt;/li&gt;
&lt;li&gt;StrictRequire: Absolutely forces the connection to be forbidden when NSSRequireSSL or NSSRequire aren't met.&lt;/li&gt;
&lt;li&gt;OptRenegotiate: Allows the SSL connection to be renegotiated using a different configuration. This is designed for a per-directory and is relatively expensive to do. For example, it can be used to force very strong ciphers in particular directories.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All options are disabled by default.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;NSSOptions +FakeBasicAuth
  &lt; Files ~ "\.(cgi|shtml)$"&gt;
  NSSOptions +StdEnvVars
  &lt; Files&gt;&lt;/pre&gt;

&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;NSSRequireSSL&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The request is forbidden unless the connection is using SSL. Only available in a per-directory context. This takes no arguments.&lt;/p&gt;
&lt;p&gt;Example&lt;/p&gt;
&lt;pre&gt;NSSRequireSSL&lt;/pre&gt;

&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;NSSRequire&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Provides a regular expression-based access-control mechanism. Access may be restricted (or allowed) based on any number of variables such as components of the client certificate, the remote IP address, etc.&lt;/p&gt;
&lt;p&gt;Example&lt;/p&gt;
&lt;pre&gt;NSSRequire&lt;/pre&gt;

&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;NSSRenegBufferSize&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Configure the amount of memory that will be used for buffering the request body if a per-location SSL renegotiation is required due to changed access control requirements. The value is in bytes. The default is 128K.
  If set to 0 then no buffering is done.&lt;/p&gt;
&lt;p&gt;Example&lt;/p&gt;
&lt;pre&gt;NSSRenegBufferSize 262144&lt;/pre&gt;

&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;NSSSNI&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Enables or disables Server Name Identification (SNI) extension check for TLS. This option is enabled by default. To disable SNI, set this to off in the default name-based VirtualHost.&lt;/p&gt;
&lt;p&gt;Example&lt;/p&gt;
&lt;pre&gt;NSSSNI off&lt;/pre&gt;

&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;NSSStrictSNIVHostCheck&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Configures whether a non-SNI client is allowed to access a name-based VirtualHost. If set to on in the default name-based VirtualHost then clients that are SNI unaware cannot access any virtual host. If set to on in any other VirtualHost then SNI unaware clients cannot access this particular virtual host.&lt;/p&gt;
&lt;p&gt;Example&lt;/p&gt;
&lt;pre&gt;NSSStrictSNIVHostCheck off&lt;/pre&gt;

&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;NSSProxyEngine&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Enables or disables mod_nss HTTPS support for mod_proxy.&lt;/p&gt;
&lt;p&gt;Example&lt;/p&gt;
&lt;pre&gt;NSSProxyEngine on&lt;/pre&gt;

&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;NSSProxyProtocol&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Specifies the SSL protocols that may be used in proxy connections. The syntax is identical to NSSProtocol.&lt;/p&gt;
&lt;p&gt;Example&lt;/p&gt;
&lt;pre&gt;NSSProxyProtocol SSLv3&lt;/pre&gt;

&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;NSSProxyCipherSuite&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Specifies the SSL ciphers available for proxy connections. The syntax is identical to NSSCipherSuite.&lt;/p&gt;
&lt;p&gt;Example&lt;/p&gt;
&lt;pre&gt;NSSProxyCipherSuite +rsa_3des_sha,-rsa_null_md5,-rsa_null_sha,+rsa_rc4_128_md5&lt;/pre&gt;

&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;NSSProxyNickname&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The nickname of the client certificate to send if the remote server requests client authentication.&lt;/p&gt;
&lt;p&gt;Example&lt;/p&gt;
&lt;pre&gt;NSSProxyNickname beta&lt;/pre&gt;

&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;NSSProxyCheckPeerCN&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Compare the CN value of the peer certificate with the hostname being requested. If this is set to on, the default, then the request will fail if they do not match. If this is set to off then this comparison is not done. Note that this test is your only protection against a man-in-the-middle attack so leaving this as on is strongly recommended.&lt;/p&gt;
&lt;p&gt;Example&lt;/p&gt;
&lt;pre&gt;NSSProxyCheckPeerCN on&lt;/pre&gt;

&lt;hr&gt;
&lt;h2&gt;Environment Variables&lt;/h2&gt;
&lt;p&gt;Quite a few environment variables (for CGI and SSI) may be set depending on the NSSOptions configuration. It can be expensive to set these so it is recommended that they only be set when they will be used (e.g. don't set them on a per-server basis). Here is a list of the variables along with the option used to set them.&lt;/p&gt;
&lt;p&gt;Always Set&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;HTTPS&lt;/td&gt;
&lt;td&gt;Set to "on" if HTTPS is being used&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;+StdEnvVars&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;SSL_VERSION_INTERFACE&lt;/td&gt;
&lt;td&gt;The version of mod_nss the server is running&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SSL_VERSION_LIBRARY&lt;/td&gt;
&lt;td&gt;The version of NSS that mod_nss was compiled against.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SSL_PROTOCOL&lt;/td&gt;
&lt;td&gt;SSLv3, TLSv1.0, TLSv1.1 or TLSv1.2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SSL_CIPHER&lt;/td&gt;
&lt;td&gt;The cipher the connection is using&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SSL_CIPHER_EXPORT&lt;/td&gt;
&lt;td&gt;true if the cipher is an export cipher, false otherwise&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SSL_CIPHER_USEKEYSIZE&lt;/td&gt;
&lt;td&gt;Number if bits the cipher is using&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SSL_CIPHER_ALGKEYSIZE&lt;/td&gt;
&lt;td&gt;Max number of bits possible in the cipher&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SSL_CLIENT_VERIFY&lt;/td&gt;
&lt;td&gt;NONE if no client auth, SUCCESS or FAILED if SSLVerifyCert is set&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SSL_CLIENT_V_START&lt;/td&gt;
&lt;td&gt;Client certificate validity start time&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SSL_CLIENT_V_END&lt;/td&gt;
&lt;td&gt;Client certificate validity end time&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SSL_CLIENT_V_REMAIN&lt;/td&gt;
&lt;td&gt;Number of days that the certificate is valid&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SSL_CLIENT_M_VERSION&lt;/td&gt;
&lt;td&gt;X.509 version of the client certificate&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SSL_CLIENT_M_SERIAL&lt;/td&gt;
&lt;td&gt;Serial number of the client certificate&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SSL_CLIENT_A_KEY&lt;/td&gt;
&lt;td&gt;Algorithm used for client key&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SSL_CLIENT_A_SIG&lt;/td&gt;
&lt;td&gt;Algorithm used for the signature of the client key&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SSL_CLIENT_S_DN&lt;/td&gt;
&lt;td&gt;Distinguished Name (DN) of the client certificate&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SSL_CLIENT_S_DN_[C,ST,L,O,OU,CN,T,I,G,S,D,UID,Email]&lt;/td&gt;
&lt;td&gt;Components of the client certificate. Only those that exist in the certificate are created.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SSL_CLIENT_SAN_[DNS, IPAddr, Email, OTHER_msUPN]_[0..n]&lt;/td&gt;
&lt;td&gt;A subset of Subject Alternate Names. Each entry is appended with a unique sequential number.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SSL_CLIENT_I_DN&lt;/td&gt;
&lt;td&gt;Distinguished Name (DN) of the client certificate issuer&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SSL_CLIENT_I_DN_[C,ST,L,O,OU,CN,T,I,G,S,D,UID,Email]&lt;/td&gt;
&lt;td&gt;Components of the client issuer certificate. Only those that exist in the certificate are created&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SSL_SERVER_DN&lt;/td&gt;
&lt;td&gt;Distinguished Name (DN) of the server certificate&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SSL_SERVER_DN_[C,ST,L,O,OU,CN,T,I,G,S,D,UID,Email]&lt;/td&gt;
&lt;td&gt;Components of the server certificate. Only those that exist in the certificate are created&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SSL_SERVER_I_DN_[C,ST,L,O,OU,CN,T,I,G,S,D,UID,Email]&lt;/td&gt;
&lt;td&gt;Components of the server issuer certificate. Only those that exist in the certificate are created&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SSL_SERVER_M_VERSION&lt;/td&gt;
&lt;td&gt;X.509 version of the server certificate&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SSL_SERVER_M_SERIAL&lt;/td&gt;
&lt;td&gt;Serial number of the server certificate&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SSL_SERVER_V_START&lt;/td&gt;
&lt;td&gt;Server certificate validity start time&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SSL_SERVER_V_END&lt;/td&gt;
&lt;td&gt;Server certificate validity end time&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SSL_SERVER_A_KEY&lt;/td&gt;
&lt;td&gt;Algorithm used for server key&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SSL_SERVER_A_SIG&lt;/td&gt;
&lt;td&gt;Algorithm used for the signature of the server key&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SSL_SESSION_ID&lt;/td&gt;
&lt;td&gt;SSL Session ID&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SSL_SERVER_SAN_[DNS, IPAddr, Email, OTHER_msUPN]_[0..n]&lt;/td&gt;
&lt;td&gt;A subset of Subject Alternate Names. Each entry is appended with a unique sequential number.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;+ExportCertData&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;SSL_SERVER_CERT&lt;/td&gt;
&lt;td&gt;The server certificate in PEM format.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SSL_CLIENT_CERT&lt;/td&gt;
&lt;td&gt;The client certificate in PEM format (if available)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SSL_CLIENT_CERT_CHAIN_[0..n]&lt;/td&gt;
&lt;td&gt;Each certificate in the client certificate chain in PEM format (including the client certificate itself).&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;Database Management&lt;/h2&gt;
&lt;p&gt;NSS stores it's certificates and keys in a set of files referred to as the "certificate database." The files by default (with NSS 3.x) are named cert8.db, key3.db and secmod.db. See the &lt;a href="http://www.mozilla.org/projects/security/pki/nss/"&gt;NSS documentation&lt;/a&gt; for more information on these specific files.
By default the NSS databases use the Berkeley Database format (cert8 and key3). To use the sqlite format (cert9 and key4) either include sql: in all references to the database (-d sql:/path/to/database) or export NSS_DEFAULT_DB_TYPE="sql".&lt;/p&gt;
&lt;p&gt;For more details &lt;a href="https://wiki.mozilla.org/NSS_Shared_DB"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The NSS database also stores any Certificate Revocation Lists (CRLs).&lt;/p&gt;
&lt;p&gt;Several NSS tools are available for managing certificates, keys, PKCS#11 modules and CRLs. These come with the NSS distribution. Here is a brief overview:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Tool&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;certutil&lt;/td&gt;
&lt;td&gt;Generate Certificate Signing Requests, install certificates and manage certificate trust flags.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;crlutil&lt;/td&gt;
&lt;td&gt;Manage certificate revocation lists (CRLs).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;modutil&lt;/td&gt;
&lt;td&gt;Manage the database of PKCS11 modules (secmod.db). Add modules and modify the properties of existing modules (such as whether a module is the default provider of some crypto service).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pk12util&lt;/td&gt;
&lt;td&gt;Import and export keys and certificates in PKCS12 format.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Here are some quick, useful commands. This assumes that the NSPR and NSS libraries are in your LD_LIBRARY_PATH. Certificates may be referred to by either their DN or by a short nickname that is assigned when the certificate is added to the database. The nickname is the preferred method of referring to certificates. All of these commands use the -d option to specify the database location. The default is ~/.netscape and is probably not what you want.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;command&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Create a Database&lt;/td&gt;
&lt;td&gt;certutil -N -d [path]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;List all Certificates&lt;/td&gt;
&lt;td&gt;certutil -L -d [path]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Extract a cert (Server-Cert) in ASCII&lt;/td&gt;
&lt;td&gt;certutil -L -n Server-Cert -d [path] -a&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Extract a cert and key (Server-Cert) in PKCS#12&lt;/td&gt;
&lt;td&gt;pk12util -o server.p12 -n Server-Cert -d [path]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Import a cert and key (Import-Me) from PKCS#12&lt;/td&gt;
&lt;td&gt;pk12util -i server.p12 -n Import-Me -d [path]&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;Importing OpenSSL Certificates&lt;/h2&gt;
&lt;p&gt;If you have existing OpenSSL certificates you can import them into an NSS certificate database.&lt;/p&gt;
&lt;p&gt;To import a server certificate (nickname Server-Cert):&lt;/p&gt;
&lt;pre&gt;% openssl pkcs12 -export -in /path/to/certificate -inkey /path/to/keyfile -out server.p12 -name "Server-Cert" -passout pass:foo
% pk12util -i server.p12 -d [path] -W foo &lt;/pre&gt;

&lt;p&gt;To import a CA certificate:&lt;/p&gt;
&lt;pre&gt;% certutil -A -n "myca" -t "CT,," -d [path] -a -i /path/to/cacertificate&lt;/pre&gt;

&lt;p&gt;To import a CRL:&lt;/p&gt;
&lt;pre&gt;% openssl crl -in /path/to/crlfile -out /tmp/crl.tmp -inform PEM -outform DER
% crlutil -I -t 1 -d [path] -i /tmp/crl.tmp&lt;/pre&gt;

&lt;p&gt;To verify that your server certificate was imported properly, you can have NSS validate it:&lt;/p&gt;
&lt;pre&gt;% certutil -V -n Server-Cert -u V -d .
certutil: certificate is valid&lt;/pre&gt;</content><category term="mod-nss"></category><category term="mod-nss"></category></entry><entry><title>Certutil Command for Linux</title><link href="https://akasurde.github.io/certutil-cheat-sheet.html" rel="alternate"></link><published>2016-12-11T12:03:00+05:30</published><updated>2016-12-11T12:03:00+05:30</updated><author><name>Abhijeet Kasurde</name></author><id>tag:akasurde.github.io,2016-12-11:/certutil-cheat-sheet.html</id><summary type="html">&lt;p&gt;Certutil command - Cheatsheet&lt;/p&gt;</summary><content type="html">&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;View pkcs12 file using keytool&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;$ keytool -list -keystore "PATH_TO_P12_FILE" -storepass "P12_FILE_PASSWORD" -storetype PKCS12 -v&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a new certificate database&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;$ certutil -N -d .&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;List all certificates in a database&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;$ certutil -L -d .&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;List all private keys in a database&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;$ certutil -K -d . -f pwdfile.txt&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Import the signed certificate into the requesters database&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;$ certutil -A -n "Server-cert" -t ",," -i server.crt -d . &lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To add subject alternative names, use a comma seperated list with the option -8 IE:&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;$ certutil -S -f pwdfile.txt -d . -t ",," -c "Server-Cert" -n "server1" -g 2048 -s "CN=testuser1,O=testrelm.test" &lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="grep"></category><category term="Certificate commands cheatsheet"></category></entry><entry><title>OpenSSL commands</title><link href="https://akasurde.github.io/openssl-cheat-sheet.html" rel="alternate"></link><published>2016-12-01T12:03:00+05:30</published><updated>2016-12-01T12:03:00+05:30</updated><author><name>Abhijeet Kasurde</name></author><id>tag:akasurde.github.io,2016-12-01:/openssl-cheat-sheet.html</id><summary type="html">&lt;p&gt;OpenSSL command info&lt;/p&gt;</summary><content type="html">&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Generate a new private key and Certificate Signing Request&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;$ openssl req -out CSR.csr -new -newkey rsa:2048 -nodes -keyout privateKey.key &lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Generate a self-signed certificate&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;$ openssl req -x509 -sha256 -nodes -days 365 -newkey rsa:2048 -keyout privateKey.key -out certificate.crt&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Generate a certificate signing request (CSR) for an existing private key&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;$ openssl req -out CSR.csr -key privateKey.key -new &lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Generate a certificate signing request based on an existing certificate&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;$ openssl x509 -x509toreq -in certificate.crt -out CSR.csr -signkey privateKey.key&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Remove a passphrase from a private key&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;$ openssl rsa -in privateKey.pem -out newPrivateKey.pem&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Check a Certificate Signing Request (CSR)&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;$ openssl req -text -noout -verify -in CSR.csr&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Check a private key&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;$ openssl rsa -in privateKey.key -check&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Check a certificate&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;$ openssl x509 -in certificate.crt -text -noout&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Check a PKCS#12 file (.pfx or .p12)&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;$ openssl pkcs12 -info -in keyStore.p12&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Convert a DER file (.crt .cer .der) to PEM&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;$ openssl x509 -inform der -in certificate.cer -out certificate.pem&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Convert a PEM file to DER&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;$ openssl x509 -outform der -in certificate.pem -out certificate.der&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Convert a PKCS#12 file (.pfx .p12) containing a private key and certificates to PEM&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;$ openssl pkcs12 -in keyStore.pfx -out keyStore.pem -nodes&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Convert a PEM certificate file and a private key to PKCS#12 (.pfx .p12)&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;$ openssl pkcs12 -export -out certificate.pfx -inkey privateKey.key -in certificate.crt -certfile CACert.crt&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Extract Keys from PKCS#12 container&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;$ openssl pkcs12 -in yourP12File.pfx -nocerts -out privateKey.pem &lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Extract Certificates from PKCS#12 container&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;$ openssl pkcs12 -in yourP12File.pfx -clcerts -nokeys -out publicCert.pem &lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Verifying that a Certificate is issued by a CA&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;$  openssl verify -verbose -CAfile cacert.pem  server.crt&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="certificates"></category><category term="openssl"></category><category term="cheatsheet"></category></entry><entry><title>Windows AD Command line cheatsheet</title><link href="https://akasurde.github.io/windows-ad-cheat-sheet.html" rel="alternate"></link><published>2016-07-05T12:03:00+05:30</published><updated>2016-07-05T12:03:00+05:30</updated><author><name>Abhijeet Kasurde</name></author><id>tag:akasurde.github.io,2016-07-05:/windows-ad-cheat-sheet.html</id><summary type="html">&lt;p&gt;Windows AD Command line - Cheatsheet&lt;/p&gt;</summary><content type="html">&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Query AD objects using command line &lt;/p&gt;
&lt;p&gt;&lt;pre&gt;C:\&amp;gt;dsquery user&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="Windows Active Directory, Commandline"></category><category term="commandline"></category><category term="Windows AD"></category></entry><entry><title>[Solved] Failed to connect, CredSSP required by server</title><link href="https://akasurde.github.io/windows-rdesktop.html" rel="alternate"></link><published>2016-07-03T12:03:00+05:30</published><updated>2016-07-03T12:03:00+05:30</updated><author><name>Abhijeet Kasurde</name></author><id>tag:akasurde.github.io,2016-07-03:/windows-rdesktop.html</id><summary type="html">&lt;p&gt;[Solved] Failed to connect, CredSSP required by server&lt;/p&gt;</summary><content type="html">&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;While connecting to Windows Server using rdesktop from Linux server using 
following command like&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;$ rdesktop -u Administrator -d akrelm.in 192.168.122.149 -p pa$$w0rd&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;if you get this error&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;Failed to connect, CredSSP required by server&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;then,&lt;/p&gt;
&lt;p&gt;Run following registry edit command on Windows Server&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;C:\&amp;gt;reg add "HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp" /v UserAuthentication /t REG_DWORD /d 0 /f&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="Windows, rdesktop, Linux, Fedora 24"></category><category term="commandline"></category><category term="Windows"></category><category term="Linux"></category><category term="rdesktop"></category></entry><entry><title>Bash Scripting Syntax</title><link href="https://akasurde.github.io/bash-syntax-cheat-sheet.html" rel="alternate"></link><published>2016-06-07T12:03:00+05:30</published><updated>2016-06-07T12:03:00+05:30</updated><author><name>Abhijeet Kasurde</name></author><id>tag:akasurde.github.io,2016-06-07:/bash-syntax-cheat-sheet.html</id><summary type="html">&lt;p&gt;Bash scripting syntax cheatsheet&lt;/p&gt;</summary><content type="html">&lt;ul&gt;
&lt;li&gt;Compare integer in bash, (for avoiding error : &lt;code&gt;unary operator expected error&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;
if [[ $i -ge 2 ]]
&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Number tables (for loop example)&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;
for i in {1..9};
do
    for j in $(seq 1 9);
    do
        echo -ne $i×$j=$((i*j))\\t;
    done;
    echo;
done
&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Test of variable is a number in bash shell script&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;
re='^[0-9]+$'
if ! [[ $yournumber =~ $re ]] ; then
    echo "error: Not a number" &gt;&amp;2;
    exit 1
fi
&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Remove last character of variable&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;
something="myname"
echo ${something%?}
&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Removing first character of variable&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;
something="myname"
echo ${something#?}
&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Using nested variable in bash&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;
array=(1 2 3 4 5)
for i in ${array[@]}
do
    v=$(printf "str%s" $i)
    echo $v
done
&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Redirecting eval to log file&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;
eval ls 2&gt;&amp;1 &gt; /tmp/av.log
&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Converting variable string into lower case using bash&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;
REALM="Sample.Example.COM"
echo $REALM
echo ${REALM,,}
&lt;/pre&gt;</content><category term="bash, scripting, command line"></category><category term="bash"></category><category term="shell"></category><category term="scripting"></category><category term="command line"></category></entry><entry><title>Bash alias functions</title><link href="https://akasurde.github.io/alias-function-cheat-sheet.html" rel="alternate"></link><published>2016-06-04T12:03:00+05:30</published><updated>2016-06-04T12:03:00+05:30</updated><author><name>Abhijeet Kasurde</name></author><id>tag:akasurde.github.io,2016-06-04:/alias-function-cheat-sheet.html</id><summary type="html">&lt;p&gt;Bash alias function&lt;/p&gt;</summary><content type="html">&lt;ul&gt;
&lt;li&gt;Function to add alias of command&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;
function addalias() {
    echo -e "adding alias $1 for $2\n"
    echo -e "alias ${1}=\"${2}\"" &gt;&gt; ~/.bashrc
    . ~/.bashrc
}
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Usage&lt;/strong&gt; : &lt;code&gt;addalias  nameofalias "command"&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Function to find newly installed python module working&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;
function import(){
    python -c "import ${1}" 2&gt; /dev/null
    [ $? -eq 0 ] &amp;&amp; echo -e "Python module ${1} installed properly" || \
    echo -e "Python module ${1} is missing or perhaps mispelled"
}
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Usage&lt;/strong&gt; : &lt;code&gt;import python_modulename&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Function to mkdir and cd into directory&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;
function mkcd () {
    mkdir -p "$@" &amp;&amp; eval cd "\"\$$#\"";
}
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Usage&lt;/strong&gt; : &lt;code&gt;mkcd abc&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Function to show IP of all connections&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;
function ips () {
  local interface=""
  local types='vmnet|en|eth|vboxnet|wlan|wl|tap|tun'
  local i
  for i in $(ifconfig \
      | egrep -o '(^('$types')[0-9]|inet (addr:)?([0-9]+\.){3}[0-9]+)' \
      | egrep -o '(^('$types')[0-9]|([0-9]+\.){3}[0-9]+)' \
      | grep -v 127.0.0.1
  ); do
      if ! [ "$( echo $i | perl -pi -e 's/([0-9]+\.){3}[0-9]+//g' )" == "" ]; then
          interface="$i":
      else
          echo $interface $i
      fi
  done
}
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Usage&lt;/strong&gt;: &lt;code&gt;ips&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Function to check "Are you root ?"&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;
function chk_root () {
    if [ ! $( id -u ) -eq 0 ]; then
        echo -e "Must be run as root"
        exit
    fi
}
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Usage&lt;/strong&gt;: Just use &lt;code&gt;chk_root&lt;/code&gt; in script&lt;/p&gt;</content><category term="bash"></category><category term="bash"></category><category term="alias"></category><category term="functions"></category><category term="cheatsheet"></category></entry><entry><title>Bash alias</title><link href="https://akasurde.github.io/alias-cheat-sheet.html" rel="alternate"></link><published>2016-06-01T12:03:00+05:30</published><updated>2016-06-01T12:03:00+05:30</updated><author><name>Abhijeet Kasurde</name></author><id>tag:akasurde.github.io,2016-06-01:/alias-cheat-sheet.html</id><summary type="html">&lt;p&gt;Bash command alias&lt;/p&gt;</summary><content type="html">&lt;p&gt;Following are some alias to make you work faster&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Alias for &lt;code&gt;cd&lt;/code&gt; command&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;
alias cd..="cd .."
alias 2..="cd ../.."
alias 3..="cd ../../.."
alias 4..="cd ../../../.."
alias 5..="cd ../../../../.."
&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Alias for &lt;code&gt;apt-get&lt;/code&gt; command&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;
alias agi='apt-get install'
alias agu='apt-get update'
alias ags='apt-cache search'
alias agsh='apt-cache show'
alias agr='apt-get remove'
alias agd='apt-get dist-upgrade'
&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Alias for &lt;code&gt;ssh&lt;/code&gt; command&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;
alias dev="user@dev.example.com -p 8000"
alias prod="user@prod.example.com -p 8000"
&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Alias for &lt;code&gt;df&lt;/code&gt; command&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;
alias df="df -TPh"
&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Alias for Port usages&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;
alias lsof="sudo lsof -i -P -sTCP:LISTEN"
&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="bash"></category><category term="bash"></category><category term="alias"></category><category term="cheatsheet"></category></entry><entry><title>Using IFS in Bash forloop</title><link href="https://akasurde.github.io/using-ifs-in-bash-for-loop.html" rel="alternate"></link><published>2016-05-23T12:03:00+05:30</published><updated>2016-05-23T12:03:00+05:30</updated><author><name>Abhijeet Kasurde</name></author><id>tag:akasurde.github.io,2016-05-23:/using-ifs-in-bash-for-loop.html</id><summary type="html">&lt;p&gt;Using IFS variable in Bash for loop&lt;/p&gt;</summary><content type="html">&lt;p&gt;While using for loop in Shell scripting, there are times when you want to use
filenames or variables with spaces like&lt;/p&gt;
&lt;pre&gt;
$ firewall-cmd --list-rich-rule
rule family="ipv4" source address="192.168.122.1" forward-port port="80" protocol="tcp" to-port="8188"

$ for i in `firewall-cmd --list-rich-rule`; do echo $i ; done

rule
family="ipv4"
source
address="192.168.122.1"
forward-port
port="80"
protocol="tcp"
to-port="8188"
&lt;/pre&gt;

&lt;p&gt;But, you want whole command output in single variable. Then, IFS will come to your help. First, replace IFS environment variable to new line character.&lt;/p&gt;
&lt;pre&gt;
OLDIFS=$IFS
IFS=$"\n"
&lt;/pre&gt;

&lt;p&gt;Notice that we are storing IFS in variable with &lt;code&gt;$"\n"&lt;/code&gt;. Read more about this &lt;a href="http://www.gnu.org/software/bash/manual/bash.html#ANSI_002dC-Quoting"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Now, script looks like this&lt;/p&gt;
&lt;pre&gt;
OLDIFS=$IFS
IFS=$"\n";
for i in `firewall-cmd --list-rich-rule`; do  echo $i ; done
IFS=$OLDIFS
&lt;/pre&gt;

&lt;p&gt;And, you are done.&lt;/p&gt;
&lt;p&gt;Output is something like this,&lt;/p&gt;
&lt;pre&gt;
rule family="ipv4" source address="192.168.122.1" forward-port port="80" protocol="tcp" to-port="8188"
&lt;/pre&gt;</content><category term="Shell Scripting, Bash, forloop"></category><category term="shell"></category><category term="bash"></category><category term="scripting"></category><category term="for"></category></entry><entry><title>Vim cheatsheet - Part I</title><link href="https://akasurde.github.io/vim-cheat-sheet.html" rel="alternate"></link><published>2016-05-18T12:03:00+05:30</published><updated>2016-05-18T12:03:00+05:30</updated><author><name>Abhijeet Kasurde</name></author><id>tag:akasurde.github.io,2016-05-18:/vim-cheat-sheet.html</id><summary type="html">&lt;p&gt;Vim command - Cheatsheet&lt;/p&gt;</summary><content type="html">&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Read command output to current line&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;:read ! command &lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Open file under cursor&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;kbd&gt;ESC&lt;/kbd&gt; + gf&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create heading 1 in markdown&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;:map h1 yypVr=o&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create heading 2 in markdown&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;:map h2 yypVr-o&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Replace content from current file to end of file&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;:.,$s/pattern1/pattern2/gc&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Change certain number of lines from current line&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;:.,.+&lt;number&gt;s/pattern1/pattern2/gc&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Usage&lt;/strong&gt; : &lt;code&gt;:.,.+4s/foo/bar/gc&lt;/code&gt; # this is will replace foo to bar
            from current line to next 4 lines.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Creating mark&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;kbd&gt;ESC&lt;/kbd&gt; + m + key_name &lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Return to mark&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;kbd&gt;ESC&lt;/kbd&gt; + ' + key_name &lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Deleting everything from paraenthese or ()&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;kbd&gt;ESC&lt;/kbd&gt; + di( &lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Using temporary buffers&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;kbd&gt;ESC&lt;/kbd&gt; + "a4yy &lt;/pre&gt;
&lt;pre&gt;&lt;kbd&gt;ESC&lt;/kbd&gt; + "ap &lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Using &lt;kbd&gt;F5&lt;/kbd&gt; to automatically remove all trailing spaces in code&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;nnoremap &amp;lt;F5&amp;gt; :let _s=@/&amp;lt;Bar&amp;gt;:%s/\s+$//e&amp;lt;Bar&amp;gt;:let @/=_s&amp;lt;Bar&amp;gt;&amp;lt;CR&amp;gt;&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Go to specific character on current line. If you want to go to first occurance of '=' then&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;kbd&gt;ESC&lt;/kbd&gt;f + = &lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Delete from current line till specified line number&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;kbd&gt;ESC&lt;/kbd&gt;:.,&lt;line_number&gt;d&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="vim"></category><category term="vim"></category><category term="hacks"></category><category term="cheatsheet"></category></entry><entry><title>Connect and program Digispark using Fedora 22 Linux</title><link href="https://akasurde.github.io/connect-digispark.html" rel="alternate"></link><published>2016-05-04T12:03:00+05:30</published><updated>2016-05-04T12:03:00+05:30</updated><author><name>Abhijeet Kasurde</name></author><id>tag:akasurde.github.io,2016-05-04:/connect-digispark.html</id><summary type="html">&lt;p&gt;In this tutorial, we will connect and program Digispark using Fedora 22 Linux&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Installation Procedures:&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Download &lt;a href="https://www.arduino.cc"&gt;Arduino&lt;/a&gt; software from &lt;a href="https://www.arduino.cc/en/Main/Software"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Unzip Arduino software package&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;$ tar xf arduino-1.6.8-linux64.tar.xz&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="digispark, open-hardware, arduino"></category><category term="digispark"></category><category term="open-hardware"></category><category term="arduino"></category></entry><entry><title>Apt-get</title><link href="https://akasurde.github.io/apt-get-cheat-sheet.html" rel="alternate"></link><published>2016-05-01T12:03:00+05:30</published><updated>2016-05-01T12:03:00+05:30</updated><author><name>Abhijeet Kasurde</name></author><id>tag:akasurde.github.io,2016-05-01:/apt-get-cheat-sheet.html</id><summary type="html">&lt;p&gt;Apt-get command info&lt;/p&gt;</summary><content type="html">&lt;p&gt;Quick Guide to &lt;code&gt;apt-get&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;apt-get update&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This retrieves the current list of packages from all servers in your &lt;code&gt;sources.list&lt;/code&gt;.
  If you don't do this from time to time your local list of available packages may become out of date.
  Do this occasionally before doing a &lt;code&gt;dist-upgrade&lt;/code&gt; or searching for a new package.
  The package lists are large: doing an update may result in several MB of data being retrieved from the Internet.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;apt-cache search program&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This will do a keyword search through the list of available packages, including package names and descriptions.
  You can put in several keywords, for example &lt;code&gt;apt-cache search text editor&lt;/code&gt; to find a list of text editors.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;apt-cache show program&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once you've found a package that looks interesting using &lt;code&gt;apt-cache search&lt;/code&gt;,you can display more detailed information about it using &lt;code&gt;apt-cache show program&lt;/code&gt;.
  This will tell you things like the size of the package (important if you are installing it off the Internet) and
  an extended description, as well as what other packages it depends on in order to work and the name of the developer who maintains the package.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;apt-get install program&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This will get the latest version of the specified package and install it, along with any other packages that it depends on in order to work.
  If the requested package is already installed, this will upgrade it to the latest available version.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;apt-get remove program&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you've previously installed a program and decide you don't want it anymore, you can remove it using this command.
  Because some software packages can depend on others, removing one program may break other programs.
  Running &lt;code&gt;apt-get remove&lt;/code&gt; therefore checks first to see if any other software needs the program to work, and uninstalls them as well.
  This is just one example of the way the Debian package management tools have been designed to try to keep your computer in a sane state, without broken or half-installed software.
  It's certainly possible to break a Debian system, but generally you have to try to do it.
  It's unlikely you could do it by mistake.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;apt-get upgrade&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Over time, most of the software packages on your computer will become out of date as new versions are released to add features or fix bugs.
  You could manually do &lt;code&gt;apt-get install foo&lt;/code&gt; on each one, but that's not very convenient, so Apt provides a simple way to upgrade your entire system at once.
  Just type &lt;code&gt;apt-get upgrade&lt;/code&gt; to have Apt check every single package on your system for a new version, then download and install it.
  This command will never install new packages, it will only upgrade packages that are already installed.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;apt-get dist-upgrade&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Sometimes you'll have a software package installed, and a new version will come out that has a lot of new features and therefore it now depends on some other program to run.
  For example, you may have a movie player installed that supports a lot of different movie formats. When new formats come out, modules for those formats may be added in separate packages, so the latest version of the movie player software now depends on a new package that you don't yet have installed on your system.
  If you just do &lt;code&gt;apt-get upgrade&lt;/code&gt;, you'll get the latest movie player, but you won't get all the new format packages. The &lt;code&gt;apt-get dist-upgrade&lt;/code&gt; command solves that problem for you: not only does it get the latest version of every package already installed just like &lt;code&gt;apt-get upgrade&lt;/code&gt;,it also installs any new packages they need that may not be on your system yet.
  If you want to keep your system up to date with all the latest updates and security patches, running &lt;code&gt;apt-get update; apt-get dist-upgrade&lt;/code&gt; from time to time is the best way to do it.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;apt-get clean&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When you ask Apt to install a software package, it downloads the package and stores it in a cache on your disk before it does the actual installation.
  If you then remove the package, but later change your mind again and re-install it, Apt doesn't need to fetch it off the Internet again because the package is sitting in the local cache.
  That's great for saving bandwidth, but after a while it can use up space on your disk so it's a good idea to periodically delete old packages from the cache.
  Running &lt;code&gt;apt-get clean&lt;/code&gt; will totally flush the package cache, possibly freeing up some precious disk space.
  Running this command is quite safe, because the worst that can happen is Apt may need to download a package again if you remove it then re-install it.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;apt-get autoclean&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is almost the same as &lt;code&gt;apt-get clean&lt;/code&gt;, except it's just a little bit smarter: instead of cleaning out your entire package cache, it deletes only superseded packages.
  For example, your package cache may contain packages for the last 7 versions of a text editor that has been upgraded a number of times: running &lt;code&gt;apt-cache autoclean&lt;/code&gt; will delete the oldest 6 versions from the cache, leaving only the latest one.
  That makes sense because you're not likely to re-install anything except the latest version anyway.
  This is also a very safe command to run, so if you're a bit tight on disk space and don't want your package cache growing too much you could put it in a Cron job to do an automatic cleanup from time to time.
  There's really no reason to keep the older packages lying around on disk anyway.&lt;/p&gt;</content><category term="apt-get"></category><category term="apt-get"></category><category term="cheatsheet"></category></entry><entry><title>Netem</title><link href="https://akasurde.github.io/netem-command.html" rel="alternate"></link><published>2016-05-01T12:03:00+05:30</published><updated>2016-05-01T12:03:00+05:30</updated><author><name>Abhijeet Kasurde</name></author><id>tag:akasurde.github.io,2016-05-01:/netem-command.html</id><summary type="html">&lt;p&gt;Netem command examples&lt;/p&gt;</summary><content type="html">&lt;p&gt;Netem provides Network Emulation functionality for testing protocols by emulating the properties of wide area networks.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Adding fixed amount of delay to packets going out of the Ethernet&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;$ tc qdisc add dev eth0 root netem delay 100ms&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Adding random amount of variation in delay to packets going out of the Ethernet&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;$ tc qdisc add dev eth0 root netem delay 100ms 10ms&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Adding random amount of variation in delay with correlation to packets going out of the Ethernet&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;$ tc qdisc add dev eth0 root netem delay 100ms 10ms 25%&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;This causes the added delay to be 100ms ± 10ms with the next random element depending 25% on the last one.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Specify non-uniform distribution in delay&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;$ tc qdisc add dev eth0 root netem delay 100ms 20ms distribution normal&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;distribution value : (normal, pareto, paretonormal)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="netem"></category><category term="linux"></category><category term="command line"></category><category term="networking"></category><category term="netem"></category></entry><entry><title>Reset root password in CentOS 7</title><link href="https://akasurde.github.io/reset-root-password-centos7.html" rel="alternate"></link><published>2016-04-25T12:03:00+05:30</published><updated>2016-04-25T12:03:00+05:30</updated><author><name>Abhijeet Kasurde</name></author><id>tag:akasurde.github.io,2016-04-25:/reset-root-password-centos7.html</id><summary type="html">&lt;p&gt;Article about resetting root password in CentOS 7&lt;/p&gt;</summary><content type="html">&lt;p&gt;Following steps will guide you in resetting root password&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Restart the CentOS 7 system&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Press any key to interrupt the boot loader countdown&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Select Linux Kernel line which needs to be booted&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Press &lt;kbd&gt;e&lt;/kbd&gt; to edit the select Linux Kernel entry&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Append &lt;code&gt;rd.break&lt;/code&gt; at end of &lt;code&gt;linux16&lt;/code&gt; line&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Press &lt;kbd&gt;CTRL&lt;/kbd&gt; + &lt;kbd&gt;x&lt;/kbd&gt; to boot system&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Mount /sysroot in read-write mode&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;switch_root:/# mount -oremount,rw /sysroot&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Switch into a chroot jail environment&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;switch_root:/# chroot /sysroot&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;set a new root password&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;sh-4.2# passwd root&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To enable SELinux relabeling of &lt;code&gt;/etc/shadow&lt;/code&gt; file, create a empty file like&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;sh-4.2# touch /.autorelabel&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Press &lt;code&gt;exit&lt;/code&gt; twice to exit &lt;code&gt;chroot&lt;/code&gt; and &lt;code&gt;initrdramfs&lt;/code&gt; shell&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="System Administration"></category><category term="root"></category><category term="CentOS"></category></entry><entry><title>How to enable Kerberos Authentication in Google Chrome</title><link href="https://akasurde.github.io/krb-auth-chrome.html" rel="alternate"></link><published>2016-04-22T12:03:00+05:30</published><updated>2016-04-22T12:03:00+05:30</updated><author><name>Abhijeet Kasurde</name></author><id>tag:akasurde.github.io,2016-04-22:/krb-auth-chrome.html</id><summary type="html">&lt;p&gt;This blog post will help you to enable Kerberos Authentication in Google Chrome&lt;/p&gt;</summary><content type="html">&lt;p&gt;Enable Simple and protected GSSAPI Negotiation Mechanism (SPNEGO) in google-chrome for allowing user
to login using Kerberos Authentication used by Base OS&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Firstly, install &lt;a href="https://www.google.com/chrome/"&gt;Google Chrome&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;and then create an empty directory&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;$ mkdir -p /etc/opt/chrome/policies/managed/ &lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Now, create a JSON file with following content&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;$ cd /etc/opt/chrome/policies/managed/ &lt;/pre&gt;
&lt;pre&gt;$ cat mydomain.json
{ "AuthServerWhitelist": "&lt;em&gt;.mydomain.com",
  "AuthNegotiateDelegateWhitelist": "&lt;/em&gt;.mydomain.com" }&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Restart chrome and You are all set.&lt;/p&gt;</content><category term="kerberos"></category><category term="kerberos"></category><category term="google-chrome"></category><category term="auth"></category><category term="Linux"></category><category term="Fedora-22"></category></entry><entry><title>Command line hacks</title><link href="https://akasurde.github.io/gnome-terminal-hacks.html" rel="alternate"></link><published>2016-03-12T12:03:00+05:30</published><updated>2016-03-12T12:03:00+05:30</updated><author><name>Abhijeet Kasurde</name></author><id>tag:akasurde.github.io,2016-03-12:/gnome-terminal-hacks.html</id><summary type="html">&lt;p&gt;Command line hacks&lt;/p&gt;</summary><content type="html">&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Running previous command with sudo&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;$ ls -la
$ sudo !!&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Usage&lt;/strong&gt;: This will run &lt;code&gt;ls -la&lt;/code&gt; command using sudo command&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Using !! on shell prompt&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;$ ls -la a  &amp;amp;&amp;amp; echo !!:2&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Usage&lt;/strong&gt;: This will print a on screen.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Finding top 5 largest files in directory&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;$ ls -lSh . | head -5&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Finding top 5 smallest files in directory&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;$ ls -lSr . | head -5&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Finding top 10 directories in /&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;$ du -a /var | sort -n -r | head -n 10&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Finding top directories in /&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;$ du -ch --max-depth 1 /&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Using !! to replace some part of command&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;$ echo "foo"
$ !!:gs/foo/bar&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Usage&lt;/strong&gt;: Runs previous command replacing &lt;code&gt;foo&lt;/code&gt; by &lt;code&gt;bar&lt;/code&gt; every time that &lt;code&gt;foo&lt;/code&gt; appears in previous command&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Using !$, !^, !*&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;$ echo foo bar baz
$ echo !$ # will return baz
$ echo !^ # will return foo
$ echo !* # will return foo bar baz&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Press ESC + . to copy last argument of bash command&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;$ cp /from/same/path/file /to/some/path
$ cd [ESC + . ] # This will take you to /to/some/path&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Tail to dmesg&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;$ watch 'dmesg | tail -10'&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To determine if you have a process holding an unlinked file open&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;$ lsof -a +L1 path_of_directory&lt;/pre&gt; or
&lt;pre&gt;$ lsof +D +L1 path_of_directory&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Find the directory which takes highest space in root&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;$ du --max-depth=1 -h&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Report XSI interprocess communication facilities status&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;$ ipcs -s # for seamphore&lt;/pre&gt;
&lt;pre&gt;$ ipcs -q # for message queues&lt;/pre&gt;
&lt;pre&gt;$ ipcs -m # for shared memory segments&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Delete till last word in gnome-terminal&lt;/p&gt;
&lt;p&gt;&lt;pre&gt; CRTL + w &lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Go to start of line in gnome-terminal&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;CTRL + a&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Delete single word on gnome-terminal&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;ALT + BACKSPACE&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ask Linux to rescan the SCSI devices on that FC HBA&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;$ echo - - - &amp;gt;/sys/class/scsi_host/host$NUMBER/scan&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Usage&lt;/strong&gt;: The wildcards “- - -” mean to look at every channel, every target, every LUN.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Taking diff of directory&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;$ diff -bur directory_2 directory_1&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Executing multiple commands using xargs&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;$ echo 1 | xargs -I{} sh -c "echo {} &amp;amp;&amp;amp; echo {}"&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Usage&lt;/strong&gt;: Here xargs will take arguments in {}, replace {} in next shell prompt&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Force running logrotate configuration file&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;$ logrotate --force /etc/logrotate.d/nginx&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Check permissions of file or directory&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;$ stat /var/lib/kdcproxy| sed -n '/^Access: (/{s/Access: (([0-9]+).*$/\1/;p}'&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Find which process owns port number&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;$ fuser -v -n tcp port_number&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Usage&lt;/strong&gt;: fuser -v -n tcp 6000&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;List used ports&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;$ lsof -i protocol_name:port_number&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Usage&lt;/strong&gt;: &lt;code&gt;lsof -i tcp:80&lt;/code&gt; checks apache running on port number 80 or not&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Get blocks and partitions&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;$ egrep -v "#blocks|^$" /proc/partitions|awk '{print $3,  $4}'&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;More swap with a swap file&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;$ dd if=/dev/zero of=/swapfile bs=1024 count=65536 #Create 64MB swap file on your root partition
$ mkswap /swapfile 65536          #convert file to swap file
$ sync
$ swapon /swapfile        #add swapfile to your swapspace&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create file of 1 TB file with 8192 blocksize&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;$ dd if=/dev/zero of=/mnt/disk8 bs=8192 seek=134217728 count=0&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Post data using curl&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;$ curl http://10.209.103.136:443 -d 'hostname=blah' -X POST -v&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="gnome-terminal"></category><category term="gnome-terminal"></category><category term="bash"></category><category term="ls"></category><category term="dd"></category><category term="swap"></category><category term="shortcut"></category><category term="hacks"></category></entry><entry><title>Git - Cheatsheet</title><link href="https://akasurde.github.io/git-cheat-sheet.html" rel="alternate"></link><published>2016-03-11T12:03:00+05:30</published><updated>2016-03-11T12:03:00+05:30</updated><author><name>Abhijeet Kasurde</name></author><id>tag:akasurde.github.io,2016-03-11:/git-cheat-sheet.html</id><summary type="html">&lt;p&gt;Git - Cheatsheet&lt;/p&gt;</summary><content type="html">&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Initialize bare repository&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;$ git init .&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Amending the commit message which is not pushed&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;$ git commit --amend&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Force push amended commit message to a remote branch&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;$ git push remote_name branch_name -f&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Undo git add to files staged for git commit&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;$ git reset HEAD file_name &lt;/pre&gt; or
&lt;pre&gt;$ git rm --cached file_name &lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Usage&lt;/strong&gt;: &lt;code&gt;git reset HEAD a.sh&lt;/code&gt; or &lt;code&gt;git rm --cached a.sh&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This command will remove a file named a.sh from the current index, the "about to be committed" area, without changing anything else.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Diff files which are under staging&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;$ git diff --staged &lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Diff between two commits&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;$ git diff commit_1 commit_2&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Diff between two branches&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;$ git diff branch_1 branch_2&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Push Local branch to central git repository&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;$ git push remote_name branch_name&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create patch using git format-patch&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;$ git format-patch master --stdout &amp;gt; fix_empty_poster.patch &lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;View first 3 commit messages in git log&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;$ git log --pretty=oneline -3 &lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Adding signed-off in commit message&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;$ git commit -s -m "commit_message" &lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Using pull without unwanted merge commits&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;$ git pull --rebase &lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Deleting last commit in local repository&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;$ git reset HEAD^ --hard &lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Deleting last commit from remote repository&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;$ git reset HEAD^ --hard &lt;/pre&gt;
&lt;pre&gt;$ git push origin master -f &lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Revert git pull&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;$ git reset --hard &lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Diff between lastest commit and last commit&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;$ git diff HEAD^ HEAD&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="git"></category><category term="git"></category></entry><entry><title>gnu-screen cheatsheet</title><link href="https://akasurde.github.io/gnu-screen-hacks.html" rel="alternate"></link><published>2016-02-12T12:03:00+05:30</published><updated>2016-02-12T12:03:00+05:30</updated><author><name>Abhijeet Kasurde</name></author><id>tag:akasurde.github.io,2016-02-12:/gnu-screen-hacks.html</id><summary type="html">&lt;p&gt;GNU screen hacks and cheatsheet&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;All commands are inside screen &lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Open new window&lt;/p&gt;
&lt;p&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;a&lt;/kbd&gt;+&lt;kbd&gt;c&lt;/kbd&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Close windows in screen&lt;/p&gt;
&lt;p&gt;&lt;kbd&gt;CTRL&lt;/kbd&gt;+&lt;kbd&gt;a&lt;/kbd&gt;+&lt;kbd&gt;k&lt;/kbd&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Detaching the screen (Coming to normal non-screen window)&lt;/p&gt;
&lt;p&gt;&lt;kbd&gt;CTRL&lt;/kbd&gt; +&lt;kbd&gt;a&lt;/kbd&gt;+&lt;kbd&gt;d&lt;/kbd&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GoTo next windows&lt;/p&gt;
&lt;p&gt;&lt;kbd&gt;CTRL&lt;/kbd&gt;+&lt;kbd&gt;a&lt;/kbd&gt;+&lt;kbd&gt;n&lt;/kbd&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Goto previous windows&lt;/p&gt;
&lt;p&gt;&lt;kbd&gt;CTRL&lt;/kbd&gt;+&lt;kbd&gt;a&lt;/kbd&gt;+&lt;kbd&gt;p&lt;/kbd&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Show list of windows&lt;/p&gt;
&lt;p&gt;&lt;kbd&gt;CTRL&lt;/kbd&gt; +&lt;kbd&gt;a&lt;/kbd&gt;+&lt;kbd&gt;Shift&lt;/kbd&gt;+&lt;kbd&gt;"&lt;/kbd&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Split panes&lt;/p&gt;
&lt;p&gt;&lt;kbd&gt;CTRL&lt;/kbd&gt; +&lt;kbd&gt;a&lt;/kbd&gt;+&lt;kbd&gt;Shift&lt;/kbd&gt;+&lt;kbd&gt;s&lt;/kbd&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Toggle between split panes&lt;/p&gt;
&lt;p&gt;&lt;kbd&gt;CTRL&lt;/kbd&gt;+&lt;kbd&gt;a&lt;/kbd&gt;+&lt;kbd&gt;Tab&lt;/kbd&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Closing split panes&lt;/p&gt;
&lt;p&gt;&lt;kbd&gt;CTRL&lt;/kbd&gt;+&lt;kbd&gt;a&lt;/kbd&gt;+&lt;kbd&gt;Shift&lt;/kbd&gt;+&lt;kbd&gt;x&lt;/kbd&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Locking the screen&lt;/p&gt;
&lt;p&gt;&lt;kbd&gt;CTRL&lt;/kbd&gt; +&lt;kbd&gt;a&lt;/kbd&gt;+&lt;kbd&gt;x&lt;/kbd&gt; # Enter password for locking and unlocking&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fancy hardstatus&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;$ vi /etc/screenrc&lt;/pre&gt;
&lt;pre&gt;hardstatus on
hardstatus alwayslastline
hardstatus string "%{.bW}%-w%{.rW}%n %t%{-}%+w %=%{..G} %H %{..Y} %m/%d %C%a "&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Reattaching the screen&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;$ screen -R&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="gnu-screen"></category><category term="gnu-screen"></category><category term="shortcut"></category><category term="hacks"></category></entry><entry><title>dpkg</title><link href="https://akasurde.github.io/dpkg-cheatsheet.html" rel="alternate"></link><published>2016-01-11T12:03:00+05:30</published><updated>2016-01-11T12:03:00+05:30</updated><author><name>Abhijeet Kasurde</name></author><id>tag:akasurde.github.io,2016-01-11:/dpkg-cheatsheet.html</id><summary type="html">&lt;p&gt;Quick cheat sheet you will find handy while using &lt;code&gt;dpkg&lt;/code&gt; at shell prompt&lt;/p&gt;</summary><content type="html">&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Installing deb file using dpkg&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;$ dpkg -i &lt;package_name&gt;.deb&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Usage&lt;/strong&gt;: &lt;code&gt;dpkg -i apache2_2.2.17-1ubuntu1.5_i386.deb&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Installing deb packages recursively from given directory&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;$ dpkg -R path_to_directory&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Usage&lt;/strong&gt;: &lt;code&gt;dpkg -R /var/cache/apt/archives/&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Find all files related to package&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;$ dpkg -L package_name&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Usage&lt;/strong&gt;: &lt;code&gt;dpkg -L apache2&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;List all package by name&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;$ dpkg -l | grep package_name&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Usage&lt;/strong&gt;: &lt;code&gt;dpkg -l | grep apache2&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Find which package is related to particular file&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;$ dpkg -S file_name&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Usage&lt;/strong&gt;: &lt;code&gt;dpkg -S /etc/apache2/apache2.conf&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Find status of package&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;$ dpkg -s &lt;package_name&gt; | grep Status&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Usage&lt;/strong&gt;: &lt;code&gt;dpkg -s apache2 | grep Status&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Display details about package package group, version, maintainer, Architecture, display depends packages, description etc.&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;$ dpkg -p package_name&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Usage&lt;/strong&gt;: &lt;code&gt;dpkg -p apache2&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;List files provided by given package&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;$ dpkg -c deb_package_name&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Usage&lt;/strong&gt;: &lt;code&gt;dpkg -c apache2_2.2.17-1ubuntu1.5_i386.deb&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;List individual package name installed with short description&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;$ dpkg -l package_name&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Usage&lt;/strong&gt;: &lt;code&gt;dpkg -l apache2&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;List all package name installed with short description&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;$ dpkg -l&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Usage&lt;/strong&gt;: &lt;code&gt;dpkg -l&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Remove package&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;$ dpkg -r package_name&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Usage&lt;/strong&gt;: &lt;code&gt;dpkg -r apache2&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Remove package with all configuration&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;$ dpkg -P package_name&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Usage&lt;/strong&gt;: &lt;code&gt;dpkg -P apache2&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="dpkg"></category><category term="dpkg"></category><category term="ubuntu"></category><category term="command-line"></category></entry><entry><title>AIX</title><link href="https://akasurde.github.io/aix-command-line.html" rel="alternate"></link><published>2016-01-01T12:03:00+05:30</published><updated>2016-01-01T12:03:00+05:30</updated><author><name>Abhijeet Kasurde</name></author><id>tag:akasurde.github.io,2016-01-01:/aix-command-line.html</id><summary type="html">&lt;p&gt;Quick and handy command line reference for AIX command line&lt;/p&gt;</summary><content type="html">&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Reset the NIM client machine state from NIM server&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;# nim -Fo reset hostname&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Usage&lt;/strong&gt;: &lt;code&gt;$ nim -Fo reset dbaix1-v8&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This is will reset NIM client dbaix1-v8 to ready state&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Deallocate resources from NIM client from NIM server&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;# nim -Fo deallocate -a lpp_source=LPP_61TL7SP5 dbaix2-v10&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Remove NIM client from NIM server&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;# nim -Fo remove hostname&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;List down all NIM client form NIM server&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;# lsnim -l&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;List down properties of particular NIM client from NIM server&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;# lsnim -l hostname&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Increase file system size by 1 GB&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;# chfs -a size=+1G /opt&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Decrease file system by 1 GB&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;# chfs -a size=-1G /opt&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;List Fibre Card adapter&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;# lsdev -Cc adapter_name&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Get Fibre Card WWPN number&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;# lscfg -v1 adapter_name&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Get statistics for Fibre Card adapter&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;# fcstat adapter_name&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="aix"></category><category term="aix"></category><category term="command-line"></category></entry><entry><title>Grep command</title><link href="https://akasurde.github.io/grep-cheat-sheet.html" rel="alternate"></link><published>2016-01-01T12:03:00+05:30</published><updated>2016-01-01T12:03:00+05:30</updated><author><name>Abhijeet Kasurde</name></author><id>tag:akasurde.github.io,2016-01-01:/grep-cheat-sheet.html</id><summary type="html">&lt;p&gt;Grep command - Cheatsheet&lt;/p&gt;</summary><content type="html">&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Search file for keyword &lt;code&gt;Error&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;$ grep "Error" mylogfile.log&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Search file for keyword &lt;code&gt;Error&lt;/code&gt; with case-insensitivity&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;$ grep -i "error" mylogfile.log&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Searching several words in file&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;$ grep -Ei "error|exception|fatal" mylogfile.log&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;See more after and more before keyword in file&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;$ grep -A 10 -B 20 "exception" mylogfile.log&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Usage&lt;/strong&gt;: Above grep will show 10 line after and 20 line before &lt;code&gt;exception&lt;/code&gt; word in &lt;code&gt;mylogfile.log&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Search file and line with filename&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;$ grep -nrH MyMethodName *&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Usage&lt;/strong&gt;: Above grep command will search files in current directory recursively with line and filename.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Search keyword in file and print only filename&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;$ grep -ril keyword location&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Usage&lt;/strong&gt;: &lt;code&gt;grep -ril "*myword*"&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Find keyword in file and print filename only&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;$ grep -l "word" *&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="grep"></category><category term="grep"></category><category term="hacks"></category><category term="cheatsheet"></category></entry></feed>